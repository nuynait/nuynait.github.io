<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Tianyun Shan</title>
  
  <subtitle>Senior Mobile Developer</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.jerryshan.com/"/>
  <updated>2021-04-15T19:04:15.764Z</updated>
  <id>http://blog.jerryshan.com/</id>
  
  <author>
    <name>Tianyun Shan</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Detect When Application Goes to Background or Become Active From Background.</title>
    <link href="http://blog.jerryshan.com/2021/04/15/Detect%20When%20Application%20Goes%20to%20Background%20or%20Become%20Active%20From%20Background/"/>
    <id>http://blog.jerryshan.com/2021/04/15/Detect When Application Goes to Background or Become Active From Background/</id>
    <published>2021-04-15T19:03:00.000Z</published>
    <updated>2021-04-15T19:04:15.764Z</updated>
    
    <content type="html"><![CDATA[<p>This is Android equivalent to iOS applicationDidBecomeActive or applicationDidEnterBackground. However the same implementation in Android is much more complicated. Here is how you can do this properly.</p><span id="more"></span><p>This is essentially equivalent to iOS applicationDidBecomeActive or applicationDidEnterBackground in Android. However the same implementation in Android is much more complicated. Here is how you can do this properly.</p><h1 id="App-Lifecycle"><a href="#App-Lifecycle" class="headerlink" title="App Lifecycle"></a>App Lifecycle</h1><p>On Android we use the <code>LifecycleObserver</code> from <code>androidx.lifecycle.lifecycleObserver</code>. First create an object that implements <code>LifecycleObserver</code> in your project. For example:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> handlers;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> androidx.lifecycle.Lifecycle;</span><br><span class="line"><span class="keyword">import</span> androidx.lifecycle.LifecycleObserver;</span><br><span class="line"><span class="keyword">import</span> androidx.lifecycle.OnLifecycleEvent;</span><br><span class="line"><span class="keyword">import</span> presentation.interfaces.AppLifecycleCallback;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppLifecycleListener</span> <span class="keyword">implements</span> <span class="title">LifecycleObserver</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> AppLifecycleCallback delegate;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AppLifecycleListener</span><span class="params">(AppLifecycleCallback delegate)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.delegate = delegate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;unused&quot;)</span></span><br><span class="line">    <span class="meta">@OnLifecycleEvent(Lifecycle.Event.ON_START)</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">onAppBecomeActive</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        delegate.onAppBecomeActive();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;unused&quot;)</span></span><br><span class="line">    <span class="meta">@OnLifecycleEvent(Lifecycle.Event.ON_STOP)</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">onAppDidEnterBackground</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        delegate.onAppDidEnterBackground();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The <code>AppLifecycleCallback</code> delegate is an interface we created in the project.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> presentation.interfaces;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AppLifecycleCallback</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">onAppBecomeActive</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">onAppDidEnterBackground</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Now we will host an instance of the above object inside your app application object. Note that your application will implement the <code>AppLifecycleCallback</code> </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> AppLifecycleListener mAppLifecycleListener = <span class="keyword">new</span> AppLifecycleListener(<span class="keyword">this</span>);</span><br></pre></td></tr></table></figure><p>After that, register it inside your application <code>onCreate</code>.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ProcessLifecycleOwner.get().getLifecycle().addObserver(mAppLifecycleListener);</span><br></pre></td></tr></table></figure><p>Now if you run the app, and bring the app to background, or active your app, those callback function will be triggered inside your application object. However, most of times, you will want activity to handle those actions. How to reach to your activity?</p><h1 id="Activity-Lifecycle"><a href="#Activity-Lifecycle" class="headerlink" title="Activity Lifecycle"></a>Activity Lifecycle</h1><p>My solution is to implement <code>Application.ActivityLifecycleCallbacks</code> to host a topmost activity within the reach of the application object. </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> handlers;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.app.Activity;</span><br><span class="line"><span class="keyword">import</span> android.app.Application;</span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> androidx.annotation.NonNull;</span><br><span class="line"><span class="keyword">import</span> androidx.annotation.Nullable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppActivityLifecycleCallbacks</span> <span class="keyword">implements</span> <span class="title">Application</span>.<span class="title">ActivityLifecycleCallbacks</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    <span class="keyword">public</span> Activity onTopActivity = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onActivityCreated</span><span class="params">(<span class="meta">@NonNull</span> Activity activity, <span class="meta">@Nullable</span> Bundle bundle)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onActivityStarted</span><span class="params">(<span class="meta">@NonNull</span> Activity activity)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onActivityResumed</span><span class="params">(<span class="meta">@NonNull</span> Activity activity)</span> </span>&#123;</span><br><span class="line">        onTopActivity = activity;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onActivityPaused</span><span class="params">(<span class="meta">@NonNull</span> Activity activity)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onActivityStopped</span><span class="params">(<span class="meta">@NonNull</span> Activity activity)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onActivitySaveInstanceState</span><span class="params">(<span class="meta">@NonNull</span> Activity activity, <span class="meta">@NonNull</span> Bundle bundle)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onActivityDestroyed</span><span class="params">(<span class="meta">@NonNull</span> Activity activity)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>This is my listener. I only need to get access to the top most activity so all I need to monitor is the <code>onActivityResumed</code> function. </p><p>Now we will need to put this as a reference in the application object, and register the callback in the <code>onCreate</code> function.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> AppActivityLifecycleCallbacks mActivityLifecycleCallbacks = <span class="keyword">new</span> AppActivityLifecycleCallbacks();</span><br><span class="line"><span class="comment">// Inside function onCreate:</span></span><br><span class="line">registerActivityLifecycleCallbacks(mActivityLifecycleCallbacks)</span><br></pre></td></tr></table></figure><p>Now, in the Application callbacks, we can check the top most activity if they implements <code>AppLifeCycleCallback</code>, if yes, then redirect the call, if not, then ignore. Then we will just need to implement <code>AppLifeCycleCallback</code> in the Activity that we want to handle the event.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// For example under XXApplication.java</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAppBecomeActive</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      Activity onTopActivity = mActivityLifecycleCallbacks.onTopActivity;</span><br><span class="line">      <span class="keyword">if</span> (onTopActivity <span class="keyword">instanceof</span> AppLifecycleCallback) &#123;</span><br><span class="line">          ((AppLifecycleCallback) onTopActivity).onAppBecomeActive();</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>Now, this is my application class, which includes both app lifecycle and activity lifecycle. </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyApplication</span> <span class="keyword">extends</span> <span class="title">MultiDexApplication</span> <span class="keyword">implements</span> <span class="title">AppLifecycleCallback</span> </span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> AppActivityLifecycleCallbacks mActivityLifecycleCallbacks = <span class="keyword">new</span> AppActivityLifecycleCallbacks();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> AppLifecycleListener mAppLifecycleListener = <span class="keyword">new</span> AppLifecycleListener(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate();</span><br><span class="line"><span class="comment">// custom onCreate logic.</span></span><br><span class="line">        registerActivityLifecycleCallbacks(mActivityLifecycleCallbacks);</span><br><span class="line">        ProcessLifecycleOwner.get().getLifecycle().addObserver(mAppLifecycleListener);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//region Implement AppLifecycleCallback</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAppBecomeActive</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Activity onTopActivity = mActivityLifecycleCallbacks.onTopActivity;</span><br><span class="line">        <span class="keyword">if</span> (onTopActivity <span class="keyword">instanceof</span> AppLifecycleCallback) &#123;</span><br><span class="line">            ((AppLifecycleCallback) onTopActivity).onAppBecomeActive();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//endregion</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Assume I want to handle <code>onAppBecomesActive</code> under <code>MainActivity</code>:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">BaseActivity</span> <span class="keyword">implements</span> <span class="title">AppLifecycleCallback</span> </span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Other MainActivity functions....</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//region Implement AppLifecycleCallback</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAppBecomeActive</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// Do anything you want to do when app is active, for example:</span></span><br><span class="line">        myFragment.showTint().isActive()....</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//endregion</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;This is Android equivalent to iOS applicationDidBecomeActive or applicationDidEnterBackground. However the same implementation in Android is much more complicated. Here is how you can do this properly.&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Stylish Framework</title>
    <link href="http://blog.jerryshan.com/2020/02/06/Stylish%20Framework/"/>
    <id>http://blog.jerryshan.com/2020/02/06/Stylish Framework/</id>
    <published>2020-02-06T05:00:00.000Z</published>
    <updated>2021-04-15T18:51:31.834Z</updated>
    
    <content type="html"><![CDATA[<p>In Kinetic Commerce, we use Stylish to able to switch different styles for <code>UILabel</code>, <code>UIView</code>, <code>UITextView</code>, etc. It makes switch different styles use different font, color, very easy. All you need to do is create a style sheet and use the styles you created inside style sheet when you setup a view.</p><span id="more"></span><p><a href="https://github.com/daniel-hall/Stylish">daniel-hall/Stylish</a></p><h1 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h1><p>To install Stylish:</p><ul><li><p>Adds Stylish as a git sub-module. Run below command in your project root folder, where you do <code>pod init</code> or where <code>.xcodeproj</code> file locates.</p><pre><code>  git submodule add https://github.com/daniel-hall/Stylish.git</code></pre></li><li><p>Open your project (<code>.xcworkspace</code>)  in Xcode, Select Files &gt; Add Files To “…”, then choose the <code>Stylish/Stylish.xcodeproj</code> adds into the project root tree.</p><p>  <img src="CleanShot_2020-02-08_at_10.23.002x.png"></p></li><li><p>Select your project, general tab, in the framework area adds the Stylish framework thats come with the <code>Stylish.xcodeproj</code>.</p><p>  <img src="CleanShot_2020-02-08_at_10.28.352x.png"></p></li><li><p>In your project, you need to extend and override <code>prepareForInterfaceBuilder</code> in <code>UIView</code> and <code>StyleableUIView</code> if you want to have live style rendering in Interface Builder storyboards. Put following code in your project. You can create a <code>StylishExtension.swift</code> file if needed.</p><pre><code>  /*   #### IMPORTANT!! ####   The below two extensions must always be defined in the an app that is using   Stylish if you want to have live style rendering in Interface Builder storyboards.   */  extension UIView &#123;      // This is the only entry point for setting global variables          // in Stylish for Interface Builder rendering (since App Delegate        // doesn&#39;t get run by IBDesignable. So we are setting up the global        // stylesheet that we want used for IBDesignable rendering here.      open override func prepareForInterfaceBuilder() &#123;          Stylish.stylesheet = Graphite()      &#125;  &#125;  // In order to force IBDesignable to compile and use code from this hosting  // app (specifically, the prepareForInterfaceBuilder() override above where  // we set the global stylesheet for use during IBDesignable rendering), we  // need to either 1) Create an IBDesignable view inside the host app  // (like ProgressBar, in this case) and actually place an instance of it  // on the storyboard or 2) Override prepareForInterfaceBuilder in one  // Stylish&#39;s included styleable components here in the host app. Note that  // it must be one of the Stylish components actually in use on the storyboard,  // so it might not be StyleableUIView in your app, but might instead be  // StyleableUILabel, StyleableUIButton, etc.  extension StyleableUIView &#123;      open override func prepareForInterfaceBuilder() &#123;          super.prepareForInterfaceBuilder()      &#125;  &#125;</code></pre></li></ul><h1 id="Create-Styles"><a href="#Create-Styles" class="headerlink" title="Create Styles"></a>Create Styles</h1><p>You will need to first create a stylesheet.</p><ul><li><p>Create an object <code>AppStyles.swift</code> (Use your own preferred name for the object).</p></li><li><p>Create the styles you want, you can add more styles later if needed to suit your need. Here is an example to setup the font, text color, and text alignment. If you want to see more examples, I can attach some examples at the end of this note.</p><pre><code>  struct HeaderText: Style &#123;          var propertyStylers = [              font.set(value: .systemFont(ofSize: 20.0)),              textColor.set(value: .darkGray),              textAlignment.set(value: .left)          ]  &#125;</code></pre></li><li><p>After creating the style, you need to create a styles dictionary that defines a mapping of style names to style instances.</p><pre><code>  let styles: [String : Style] = [          &quot;HeaderText&quot;: HeaderText()  ]</code></pre></li><li><p>So this is what <code>AppStyles.swift</code> looks like with one style <code>HeaderText</code>:</p><pre><code>  class AppStyle: Stylesheet &#123;      let styles: [String: Style] = [      &quot;HeaderText&quot;: HeaderText()    ]    struct HeaderText: Style &#123;          var propertyStylers = [              font.set(value: .systemFont(ofSize: 20.0)),              textColor.set(value: .darkGray),              textAlignment.set(value: .left)          ]    &#125;  &#125;</code></pre></li></ul><h1 id="Use-Styles"><a href="#Use-Styles" class="headerlink" title="Use Styles"></a>Use Styles</h1><p>To use the style you created, you can create the view (Here we use <code>UILabel</code> as an example) in the desired place of storyboard or <code>.xib</code> file.</p><ul><li><p>Change the <code>UILabel</code> to <code>StyleableUILabel</code> in the identity inspector</p><p>  <img src="CleanShot_2020-02-08_at_11.10.182x.png"></p></li><li><p>Enter the styles name <code>HeaderText</code> in the attributes inspector.</p><p>  <img src="CleanShot_2020-02-08_at_11.27.012x.png"></p></li><li><p>Now you should see the label changed to the style <code>HeaderText</code></p></li><li><p>If you see a red box around the view, then you will need to refresh the view to make it work. Select <code>.xib</code> or <code>.storyboard</code> file in the project inspector, then Editor → Refresh all Views. <strong>Make sure it needs to select on the file in project inspector.</strong> After you select refresh all views, you will see a progress bar building the project in Xcode. (If you didn’t see the progress bar, then you didn’t select the file. Click on the file and try it again!)</p><p>  <img src="CleanShot_2020-02-08_at_11.32.492x.png"></p></li><li><p>If you still see a red box, then check the style name. If you see an error message and a blank view, then you have some error in the stylesheet or the styleable view you used. It doesn’t give very nice error message. Try to debug by removing the code to see which code is having the issue.</p></li></ul><h1 id="Custom-Styleable-View"><a href="#Custom-Styleable-View" class="headerlink" title="Custom Styleable View"></a>Custom Styleable View</h1><p>The framework comes with <code>StyleableUIView</code>, <code>StyleableUILabel</code>, <code>StyleableUITextField</code>, <code>StyleableUITextView</code>, <code>StyelableUIButton</code>, and <code>StyleableUIImageView</code>. You can always create a Styleable View for yourself if needed.</p><ul><li><p>For example, I created a <code>RateView</code> which adapt to <code>Styleable</code> protocol. The benefit is that you can see the realtime effect in <code>.xib</code> or <code>storyboard</code> where you use it. Otherwise, you will only see a white space when you use a normal view inside any <code>.xib</code> or <code>storyboard</code>.</p><p>  <img src="StyleableRateView-Test.gif"></p></li></ul><h2 id="How-to-Create-a-Custom-Styleable-View"><a href="#How-to-Create-a-Custom-Styleable-View" class="headerlink" title="How to Create a Custom Styleable View"></a>How to Create a Custom Styleable View</h2><p>To create the custom styleable view, you will need to create a view normally first. Here I use the <code>RateView</code> as an example. First step is to create the view itself:</p><ul><li><p>Create the <code>RateView</code> extends <code>UIView</code>. Remember to mark this object <code>@IBDesignable</code></p></li><li><p>Create <code>init</code> function</p><pre><code>  override init(frame: CGRect) &#123;          super.init(frame: frame)          setImageViews(size: maxRating)      &#125;      required init?(coder: NSCoder) &#123;          super.init(coder: coder)          setImageViews(size: maxRating)      &#125;</code></pre><p>  Inside <code>init</code> function setup the view, create all the constraint. (Assuming we create this <code>UIView</code> programmatically).</p></li><li><p>Create a redraw function that will redraw the view when data changes.</p></li><li><p>Try building this view and run it to make sure this view is all good. This is to avoid any issue on view itself.</p></li></ul><p>After creating the normal view, we will now prepare to make this view styleable:</p><ul><li><p>Extend <code>RateView</code> to implement <code>Styleable</code> protocol.</p></li><li><p>Create <code>Styles</code> and <code>Stylesheet</code> to adapt to <code>Styleable</code> protocol. When we apply the styles and stylesheet make sure to redraw to apply the changes. Note that you will need to make them <code>@IBInspectable</code> to able to change in the interface builder.</p><pre><code>  @IBInspectable var styles: String = &quot;&quot; &#123;          didSet &#123;              redraw(rating: currentRating)              Stylish.applyStyleNames(styles, to: self, using: stylesheet)          &#125;      &#125;  @IBInspectable var stylesheet: String? = nil &#123;          didSet &#123;              redraw(rating: currentRating)              Stylish.applyStyleNames(styles, to: self, using: stylesheet)          &#125;      &#125;</code></pre></li></ul><p>Now you should able to see the view in <code>.xib</code> or <code>.storyboard</code> where uses the view. If you want to create stylesheet to customize the view, here is the additional step to add to the <code>RateView</code>:</p><ul><li><p>Create a <code>PropertyStyler</code> like below. You can change the value and target to type you want. If its an int, then value will be <code>Int?</code>, and target will be your own view. Because I added to <code>RateView</code> so target is <code>RateView</code>. Inside <code>PropertyStyler</code>‘s <code>apply</code> function, you will need to assign the value to a class property if needed and redraw the view with the new value.</p><pre><code>  struct RateColor: PropertyStyler &#123;          static var propertyKey: String &#123; return &quot;rateColor&quot; &#125;          static func apply(value: UIColor?, to target: RateView, using bundle: Bundle) &#123;              target.tintImageColor = value              target.redraw(rating: target.currentRating)          &#125;      &#125;</code></pre></li><li><p>Create property stylers array to expose the property styler you created.</p><pre><code>  static var propertyStylers: [AnyPropertyStylerType.Type] &#123;          return [RateColor.self]      &#125;</code></pre></li><li><p>(This is optional) Make type alias to make access to the struct easier. Always extension to <code>Style</code> even if you put this in <code>RateView.swift</code>.</p><pre><code>  extension Style &#123;      /// Sets the star image tint color for the ratings.      typealias rateColor = RateView.RateColor  &#125;</code></pre></li></ul><p>How to use the custom styles I just created? Inside the stylesheet for your app, you can create the structure like this:</p><pre><code>struct RateView : Style &#123;        var propertyStylers = [            rateColor.set(value: secondaryColor)        ]    &#125;</code></pre><ul><li><p>Full code for <code>RateView.swift</code></p><pre><code>  @IBDesignable class RateView: UIView, Styleable &#123;      struct RateColor: PropertyStyler &#123;          static var propertyKey: String &#123; return &quot;rateColor&quot; &#125;          static func apply(value: UIColor?, to target: RateView, using bundle: Bundle) &#123;              target.tintImageColor = value              target.redraw(rating: target.currentRating)          &#125;      &#125;      static var propertyStylers: [AnyPropertyStylerType.Type] &#123;          return [RateColor.self]      &#125;      @IBInspectable var styles: String = &quot;&quot; &#123;          didSet &#123;              redraw(rating: currentRating)              Stylish.applyStyleNames(styles, to: self, using: stylesheet)          &#125;      &#125;      @IBInspectable var stylesheet: String? = nil &#123;          didSet &#123;              redraw(rating: currentRating)              Stylish.applyStyleNames(styles, to: self, using: stylesheet)          &#125;      &#125;      static let STAR_WIDTH: CGFloat = 18.0      static let STAR_HEIGHT: CGFloat = 18.0      static let STAR_INNER_PADDING: CGFloat = 0.0      static let IMAGE_STAR_EMPTY: UIImage = UIImage(named: &quot;ic_star_empty&quot;, in: Bundle.current, compatibleWith: nil)!      static let IMAGE_STAR_FULL: UIImage = UIImage(named: &quot;ic_star_full&quot;, in: Bundle.current, compatibleWith: nil)!      static let IMAGE_STAR_HALF: UIImage = UIImage(named: &quot;ic_star_half&quot;, in: Bundle.current, compatibleWith: nil)!      private var imageViews: [UIImageView] = []      @IBInspectable var maxRating: Int = 5 &#123;          didSet &#123;              setImageViews(size: maxRating)              redraw(rating: currentRating)          &#125;      &#125;      @IBInspectable var currentRating: Double = 1 &#123;          didSet &#123;              redraw(rating: currentRating)          &#125;      &#125;      var tintImageColor: UIColor?      override init(frame: CGRect) &#123;          super.init(frame: frame)          setImageViews(size: maxRating)      &#125;      required init?(coder: NSCoder) &#123;          super.init(coder: coder)          setImageViews(size: maxRating)      &#125;      /// Setup the image view. Only call this function if the max value of rating has been changed.      /// - Parameter size: The max value for the rating.      private func setImageViews(size: Int) &#123;          // Clear imageView if there are existing ones.          imageViews.forEach &#123; x in x.removeFromSuperview() &#125;          imageViews.removeAll()          for i in 0..&lt;size &#123;              let imageView = UIImageView()              imageView.translatesAutoresizingMaskIntoConstraints = false              addSubview(imageView)              // Setup constraint              NSLayoutConstraint(item: imageView,                                 attribute: .width,                                 relatedBy: .equal,                                 toItem: nil,                                 attribute: .notAnAttribute,                                 multiplier: 1.0,                                 constant: RateView.STAR_WIDTH).isActive = true              NSLayoutConstraint(item: imageView,                                 attribute: .height,                                 relatedBy: .equal,                                 toItem: nil,                                 attribute: .notAnAttribute,                                 multiplier: 1.0,                                 constant: RateView.STAR_HEIGHT).isActive = true              // Leading              if let last = imageViews.last &#123;                  // Not first leading                  NSLayoutConstraint(item: imageView,                                     attribute: .leading,                                     relatedBy: .equal,                                     toItem: last,                                     attribute: .trailing,                                     multiplier: 1.0,                                     constant: RateView.STAR_INNER_PADDING).isActive = true              &#125; else &#123;                  // First leading                  NSLayoutConstraint(item: imageView,                                     attribute: .leading,                                     relatedBy: .equal,                                     toItem: self,                                     attribute: .leading,                                     multiplier: 1.0,                                     constant: 0.0).isActive = true              &#125;              // Top              NSLayoutConstraint(item: imageView,                                 attribute: .top,                                 relatedBy: .equal,                                 toItem: self,                                 attribute: .top,                                 multiplier: 1.0,                                 constant: 0.0).isActive = true              // Bottom              NSLayoutConstraint(item: imageView,                                 attribute: .bottom,                                 relatedBy: .equal,                                 toItem: self,                                 attribute: .bottom,                                 multiplier: 1.0,                                 constant: 0.0).isActive = true              // Last Trailing              if (i == size - 1) &#123;                  NSLayoutConstraint(item: imageView,                                     attribute: .trailing,                                     relatedBy: .equal,                                     toItem: self,                                     attribute: .trailing,                                     multiplier: 1.0,                                     constant: 0.0).isActive = true              &#125;              imageViews.append(imageView)          &#125;      &#125;      /// Display the rating based on the number provided. If you want to refresh the rate, assign to `currentRate` it will refresh automatically.      /// - Parameter rating: How many filled stars to display. Currently although it is a double, it will only support .5 rating. So if its 4.1 or 4.9, it will treated like 4.5      private func redraw(rating: Double) &#123;          // Apply current rating          let intRating: Int = Int(floor(rating))          for (index, imageView) in imageViews.enumerated() &#123;              if index == intRating - 1 &#123;                  // last element of rating                  imageView.image = Double(intRating) &lt; rating ? RateView.IMAGE_STAR_HALF : RateView.IMAGE_STAR_FULL              &#125; else if index &lt; intRating &#123;                  imageView.image = RateView.IMAGE_STAR_FULL              &#125; else &#123;                  imageView.image = RateView.IMAGE_STAR_EMPTY              &#125;              // Tint image color              if let tintImageColor = tintImageColor &#123;                  imageView.image = imageView.image?.withTintColor(tintImageColor)              &#125;          &#125;      &#125;  &#125;  extension Style &#123;      /// Sets the star image tint color for the ratings.      typealias rateColor = RateView.RateColor  &#125;</code></pre></li></ul><h1 id="Trouble-Shooting"><a href="#Trouble-Shooting" class="headerlink" title="Trouble Shooting"></a>Trouble Shooting</h1><p>If you see any error and don’t know why, try to see if you access to the asset folder with out specify the bundle. I had several times that access to image or color from the asset directly and creating the problem. Took me long time to figure this out. So check your code, make sure it does not do anything like this:</p><pre><code>// Do not do thisUIImage(named: &quot;ic_star_empty&quot;)!// Do this.UIImage(named: &quot;ic_star_empty&quot;, in: Bundle(identifier: &quot;com.xxx.xxxxx&quot;), compatibleWith: nil)!// Do not do thisUIColor(named: key.rawValue)!// Do thisUIColor(named: key.rawValue, in: Bundle(identifier: &quot;com.xxx.xxxxx&quot;), compatibleWith: nil)</code></pre><h1 id="More-Examples-for-Style"><a href="#More-Examples-for-Style" class="headerlink" title="More Examples for Style:"></a>More Examples for Style:</h1><ul><li><p>Button</p><pre><code>  struct DefaultButton : Style &#123;          var propertyStylers = [              titleColorForNormalState.set(value: UIColor(red:0.21, green:0.29, blue:0.36, alpha:1.0)),              titleColorForHighlightedState.set(value: UIColor(red:0.18, green:0.24, blue:0.31, alpha:1.0)),              titleColorForDisabledState.set(value: UIColor(red:0.18, green:0.24, blue:0.31, alpha:1.0)),              cornerRadiusRatio.set(value: 0.16),              borderWidth.set(value: 1.0),              borderColor.set(value: UIColor(red:0.21, green:0.29, blue:0.36, alpha:1.0)),              backgroundColor.set(value: UIColor(white: 0.82, alpha: 1.0))          ]      &#125;</code></pre></li><li><p>Set text</p><pre><code>  struct StylesheetTitle : Style &#123;          var propertyStylers = [text.set(value: &quot;Graphite&quot;)]      &#125;</code></pre></li><li><p>Set image</p><pre><code>  struct ThemeImage : Style &#123;          var propertyStylers = [image.set(value: UIImage(named: &quot;stone&quot;, in:  Bundle(for: ProgressBar.self), compatibleWith: nil))]      &#125;</code></pre></li><li><p>Set round corner</p><pre><code>  struct RoundedStyle : Style &#123;      var propertyStylers = [cornerRadius.set(value: 30.0), masksToBounds.set(value: true)]  &#125;</code></pre></li></ul><p>Note that you will also able to read a <code>json</code> stylesheet instead of writing all the styles by code. For detail, download the example project and learn from there.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;In Kinetic Commerce, we use Stylish to able to switch different styles for &lt;code&gt;UILabel&lt;/code&gt;, &lt;code&gt;UIView&lt;/code&gt;, &lt;code&gt;UITextView&lt;/code&gt;, etc. It makes switch different styles use different font, color, very easy. All you need to do is create a style sheet and use the styles you created inside style sheet when you setup a view.&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Download Old Version of Xcode</title>
    <link href="http://blog.jerryshan.com/2019/09/22/Download%20Old%20Version%20Of%20Xcode/"/>
    <id>http://blog.jerryshan.com/2019/09/22/Download Old Version Of Xcode/</id>
    <published>2019-09-22T04:00:00.000Z</published>
    <updated>2021-04-15T18:51:31.792Z</updated>
    
    <content type="html"><![CDATA[<p>Old version of Xcode can be downloaded at <a href="https://developer.apple.com/download/more/">Apple Developer Downloads Page</a></p><span id="more"></span><p><strong>Filter Xcode and find the specific version to download.</strong></p><p>Below is an example of downloading <code>Xcode 10.2.1</code></p><p><img src="Download%20Old%20Version%20Of%20Xcode/yabai%202019-09-22%20at%2015.36.26.png"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Old version of Xcode can be downloaded at &lt;a href=&quot;https://developer.apple.com/download/more/&quot;&gt;Apple Developer Downloads Page&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Swift Optional Protocol Methods</title>
    <link href="http://blog.jerryshan.com/2019/09/22/Swift%20Optional%20Protocol%20Methods/"/>
    <id>http://blog.jerryshan.com/2019/09/22/Swift Optional Protocol Methods/</id>
    <published>2019-09-22T04:00:00.000Z</published>
    <updated>2021-04-15T18:51:31.909Z</updated>
    
    <content type="html"><![CDATA[<p>There are two ways to create optional protocol methods. One is with <code>@objc</code> tab, the other one uses the swift extension to provide a default method if not implemented. </p><span id="more"></span><p>I prefer using the second method. </p><h1 id="Second-Option-Preferred"><a href="#Second-Option-Preferred" class="headerlink" title="Second Option (Preferred)"></a>Second Option (Preferred)</h1><p>Using this way to create optional method in protocol, we are providing a default implementation for the protocol method.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">somethingDataSourceDelegate</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">getDataSourceSize</span>()</span> -&gt; <span class="type">Int</span>?</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// provide default implementation for the protocol method</span></span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">somethingDataSourceDelegate</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">getDataSourceSize</span>()</span> -&gt; <span class="type">Int</span>? &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="First-Option-Not-Recommend"><a href="#First-Option-Not-Recommend" class="headerlink" title="First Option (Not Recommend)"></a>First Option (Not Recommend)</h1><p>For this option, we can create optional method in protocol using the old way by adding <code>@objc</code> attribute.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@objc</span> <span class="class"><span class="keyword">protocol</span> <span class="title">somethingDataSourceDelegate</span> </span>&#123;</span><br><span class="line">    <span class="keyword">@objc</span> <span class="function"><span class="keyword">func</span> <span class="title">getDataSourceSize</span>()</span> -&gt; <span class="type">Int</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;There are two ways to create optional protocol methods. One is with &lt;code&gt;@objc&lt;/code&gt; tab, the other one uses the swift extension to provide a default method if not implemented. &lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Attributed String For TextView (Spannable String)</title>
    <link href="http://blog.jerryshan.com/2019/09/10/Attributed%20String%20For%20TextView%20(Spannable%20String)/"/>
    <id>http://blog.jerryshan.com/2019/09/10/Attributed String For TextView (Spannable String)/</id>
    <published>2019-09-10T04:00:00.000Z</published>
    <updated>2021-04-15T18:51:31.779Z</updated>
    
    <content type="html"><![CDATA[<p>If you want to include different font and colour text into one TextView, which is the attributed text in iOS, you will have to use <code>SpannableString</code> in Android. This note</p><span id="more"></span><h1 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h1><p>For example,  for <code>TextView</code> below, you can see that we have a different colour for <em>”7 days”</em>. As well as its a different font type. The whole text view is mainly Typeface <strong>Helvetica</strong>. However, the red text is in <strong>Helvetica-Bold</strong> and colour code <code>#e13434</code>.</p><p><img src="7F937648-9FF0-4894-AB49-98B9C1E61894.png"></p><p>Here is how I achieve this is using the <code>SpannableString</code>. This like the Attributed String in iOS.</p><p>In Strings.xml:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">&quot;pending_deactivation_modal_code_expire_subtitle_part1&quot;</span>&gt;</span>Your activation code will expire in <span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">&quot;pending_deactivation_modal_code_expire_subtitle_highlight&quot;</span>&gt;</span>\ 7 days<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">&quot;pending_deactivation_modal_code_expire_subtitle_part2&quot;</span>&gt;</span>. Visit a participating store to activate your Contractor Rewards and start saving!<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// First get string from xml</span></span><br><span class="line"><span class="keyword">val</span> part1 = getString(R.string.pending_deactivation_modal_code_expire_subtitle_part1)</span><br><span class="line"><span class="keyword">val</span> highlight = getString(R.string.pending_deactivation_modal_code_expire_subtitle_highlight)</span><br><span class="line"><span class="keyword">val</span> part2 = getString(R.string.pending_deactivation_modal_code_expire_subtitle_part2)</span><br><span class="line"><span class="keyword">val</span> subtitle = <span class="string">&quot;<span class="variable">$part1</span><span class="variable">$highlight</span><span class="variable">$part2</span>&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Create spannable string</span></span><br><span class="line"><span class="keyword">val</span> spannable = SpannableString(subtitle)</span><br><span class="line"></span><br><span class="line">context?.let &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Set attribution for &quot;7 days&quot; a red color</span></span><br><span class="line">    spannable.setSpan(ForegroundColorSpan(ContextCompat.getColor(it, R.color.expire_date_highlight)), part1.length, <span class="string">&quot;<span class="variable">$part1</span><span class="variable">$highlight</span>&quot;</span>.length, Spannable.SPAN_EXCLUSIVE_EXCLUSIVE)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Set attribution for &quot;7 days&quot; using Helvetica_bold</span></span><br><span class="line">    spannable.setSpan(CustomTypeSpan(Typeface.create(<span class="string">&quot;helvetica_bold&quot;</span>, BOLD)), part1.length, <span class="string">&quot;<span class="variable">$part1</span><span class="variable">$highlight</span>&quot;</span>.length, Spannable.SPAN_INCLUSIVE_INCLUSIVE)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Apply spannable string into TextView</span></span><br><span class="line">tv_deactivation_modal_subtitle.setText(spannable, TextView.BufferType.SPANNABLE)</span><br></pre></td></tr></table></figure><p>Also don’t forget to include the <code>CustomTypeSpan</code> into the project.</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CustomTypeSpan</span></span>(<span class="keyword">val</span> typeface: Typeface): MetricAffectingSpan() &#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">updateDrawState</span><span class="params">(tp: <span class="type">TextPaint</span>?)</span></span> &#123;</span><br><span class="line">        tp?.let &#123;</span><br><span class="line">            applyCustomTypeface(tp, typeface)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">updateMeasureState</span><span class="params">(textPaint: <span class="type">TextPaint</span>)</span></span> &#123;</span><br><span class="line">        applyCustomTypeface(textPaint, typeface)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">applyCustomTypeface</span><span class="params">(paint: <span class="type">Paint</span>, tf: <span class="type">Typeface</span>)</span></span> &#123;</span><br><span class="line">        paint.typeface = tf</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;If you want to include different font and colour text into one TextView, which is the attributed text in iOS, you will have to use &lt;code&gt;SpannableString&lt;/code&gt; in Android. This note&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Get Current Device Language For iOS</title>
    <link href="http://blog.jerryshan.com/2019/09/03/Get%20Current%20Device%20Language%20For%20iOS/"/>
    <id>http://blog.jerryshan.com/2019/09/03/Get Current Device Language For iOS/</id>
    <published>2019-09-03T04:00:00.000Z</published>
    <updated>2021-04-15T18:51:31.804Z</updated>
    
    <content type="html"><![CDATA[<p>If you want to know what current device language is for iOS, you can use <code>NSLocale.preferredLanguages.first</code>. This will give you the most preferred language user setup in system. Which is also the system language. This will gives you a string identifier.  <a href="https://gist.github.com/jacobbubu/1836273">Here</a> is a list of string identifier for iOS.</p><span id="more"></span><p>If you want to know if user system is French, using string comparison has a problem. Because there can be multiple result being French. Fro example: fr_CA, fr_FR. etc. So I use <code>preferredLanguage?.starts(with: “fr”)</code> to see if it is French.</p><p>Complete code:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">DeviceLocaleType</span> &#123;</span><br><span class="line">     <span class="keyword">case</span> en</span><br><span class="line">     <span class="keyword">case</span> fr</span><br><span class="line">     <span class="keyword">case</span> other</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">static</span> <span class="function"><span class="keyword">func</span> <span class="title">deviceLocale</span>()</span> -&gt; <span class="type">DeviceLocaleType</span> &#123;</span><br><span class="line">     <span class="keyword">let</span> preferredLanguage <span class="operator">=</span> <span class="type">NSLocale</span>.preferredLanguages.first</span><br><span class="line">     <span class="keyword">if</span> preferredLanguage<span class="operator">?</span>.starts(with: <span class="string">&quot;en&quot;</span>) <span class="operator">??</span> <span class="literal">false</span> &#123;</span><br><span class="line">         <span class="keyword">return</span> .en</span><br><span class="line">     &#125; <span class="keyword">else</span> <span class="keyword">if</span> preferredLanguage<span class="operator">?</span>.starts(with: <span class="string">&quot;fr&quot;</span>) <span class="operator">??</span> <span class="literal">false</span> &#123;</span><br><span class="line">         <span class="keyword">return</span> .fr</span><br><span class="line">     &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">         <span class="keyword">return</span> .other</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;If you want to know what current device language is for iOS, you can use &lt;code&gt;NSLocale.preferredLanguages.first&lt;/code&gt;. This will give you the most preferred language user setup in system. Which is also the system language. This will gives you a string identifier.  &lt;a href=&quot;https://gist.github.com/jacobbubu/1836273&quot;&gt;Here&lt;/a&gt; is a list of string identifier for iOS.&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Android Localization Export</title>
    <link href="http://blog.jerryshan.com/2019/08/15/Android%20Localization%20Export/"/>
    <id>http://blog.jerryshan.com/2019/08/15/Android Localization Export/</id>
    <published>2019-08-15T04:00:00.000Z</published>
    <updated>2021-04-15T18:51:31.778Z</updated>
    
    <content type="html"><![CDATA[<p>So implementing android localization is easy. First make sure everything (text) needs to be translated is in the <code>xml</code> file. Then we use the following tool to convert the <code>xml</code> file into <code>xliff</code> translation files.</p><span id="more"></span><p><a href="https://localise.biz/free/converter/tmx-to-xliff">Convert XLIFF language translation files</a></p><p>After the conversion, we can send <code>xliff</code> to any people to translate. <a href="https://poedit.net/">The fastest and most convenient way to translate interfaces — Poedit</a> This can be a very nice <code>xliff</code> editor. Anyone (without any programming knowledge will be able to edit that file using <em>Poedit</em>)</p><p>After translation, using the above conversion tool to convert <code>xliff</code> file back to <code>.xml</code> file.</p><p>This is what I found when working for Kinetic Commerce for Lowes client. Their app needs to be translated into French and I will have to found a way to easy translation. For iOS, you can export and import <code>xliff</code> file directly. However, on Android, other than directly send <code>.xml</code> file, there is not an easy way found.</p><p>I tried using <em>csv</em> file, but copy from translation tools no longer works anymore in newer version of Android Studio.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;So implementing android localization is easy. First make sure everything (text) needs to be translated is in the &lt;code&gt;xml&lt;/code&gt; file. Then we use the following tool to convert the &lt;code&gt;xml&lt;/code&gt; file into &lt;code&gt;xliff&lt;/code&gt; translation files.&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Install or Use Specific Version of Cocoapods</title>
    <link href="http://blog.jerryshan.com/2019/08/02/Install%20or%20Use%20Specific%20Version%20of%20Cocoapods/"/>
    <id>http://blog.jerryshan.com/2019/08/02/Install or Use Specific Version of Cocoapods/</id>
    <published>2019-08-02T04:00:00.000Z</published>
    <updated>2021-04-15T18:51:31.812Z</updated>
    
    <content type="html"><![CDATA[<p>Sometimes you will need to use a specific version of <em>Cocoapods</em>, usually when you want to downgrade a cocoa pods. Here is what you need to do.</p><span id="more"></span><p><strong>First</strong> install the specific version.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo gem install cocoapods -v 1.6.1</span><br></pre></td></tr></table></figure><p><strong>Second</strong> uninstall the other version</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo gem uninstall cocoapods</span><br></pre></td></tr></table></figure><p>The above command will let you choose which version you want to uninstall if you have multiple version installed.</p><p><strong>Last But Not Least</strong> check current version</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pod --version</span><br></pre></td></tr></table></figure><p>Now use the above command to check your current version.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Sometimes you will need to use a specific version of &lt;em&gt;Cocoapods&lt;/em&gt;, usually when you want to downgrade a cocoa pods. Here is what you need to do.&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Android Multiple Firebase Apps For One Project</title>
    <link href="http://blog.jerryshan.com/2019/07/28/Android%20Multiple%20Firebase%20Apps%20For%20One%20Project/"/>
    <id>http://blog.jerryshan.com/2019/07/28/Android Multiple Firebase Apps For One Project/</id>
    <published>2019-07-28T04:00:00.000Z</published>
    <updated>2021-04-15T18:51:31.778Z</updated>
    
    <content type="html"><![CDATA[<p>If you have multiple build variant / flavour, you probably want to use different <code>google-services.json</code> depends on different build variant. The answer is yes, you can. <a href="https://stackoverflow.com/a/42086133/2581637">Here</a> is a stack-overflow answer that might help.</p><p>For detail, do something like following:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">|-- Project</span><br><span class="line">|-- app</span><br><span class="line">|-- src</span><br><span class="line">|-- production</span><br><span class="line">|-- google-services.json</span><br><span class="line">|-- staging</span><br><span class="line">|-- google-services.json</span><br><span class="line">|-- debug</span><br><span class="line">|-- google-services.json</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;If you have multiple build variant / flavour, you probably want to use different &lt;code&gt;google-services.json&lt;/code&gt; depends on different b
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Download GraphQL Schema</title>
    <link href="http://blog.jerryshan.com/2019/07/17/Download%20GraphQL%20Schema/"/>
    <id>http://blog.jerryshan.com/2019/07/17/Download GraphQL Schema/</id>
    <published>2019-07-17T04:00:00.000Z</published>
    <updated>2021-04-15T18:51:31.792Z</updated>
    
    <content type="html"><![CDATA[<p>You can manually download the schema <em>JSON</em> file by sending an introspection query to the server. It uses the <em>apollo-cli</em> package.  <a href="https://github.com/apollographql/apollo-tooling">Offical Repository</a> .  If you don’t have that, install using the command below.</p><span id="more"></span><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g apollo</span><br></pre></td></tr></table></figure><p>Use the following command to download the schema <em>JSON</em> file .</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apollo schema:download --endpoint=http://localhost:8080/graphql schema.json</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;You can manually download the schema &lt;em&gt;JSON&lt;/em&gt; file by sending an introspection query to the server. It uses the &lt;em&gt;apollo-cli&lt;/em&gt; package.  &lt;a href=&quot;https://github.com/apollographql/apollo-tooling&quot;&gt;Offical Repository&lt;/a&gt; .  If you don’t have that, install using the command below.&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Generate GraphQL Docs</title>
    <link href="http://blog.jerryshan.com/2019/07/17/Generate%20GraphQL%20Docs/"/>
    <id>http://blog.jerryshan.com/2019/07/17/Generate GraphQL Docs/</id>
    <published>2019-07-17T04:00:00.000Z</published>
    <updated>2021-04-15T18:51:31.804Z</updated>
    
    <content type="html"><![CDATA[<p>If you want to work with the graphQL, it is much easier if you can get the schema and documentation for graphQL. I test graphQL query using <strong>insomnia</strong>. However the <em>DOC</em> section in <strong>insomnia</strong> doesn’t show the graphQL doc.</p><span id="more"></span><p>There are several ways to fetch the graphQL doc.</p><h1 id="App"><a href="#App" class="headerlink" title="App"></a>App</h1><p>If you want to use an App to easily view the graphQL doc, try Altair. <a href="https://altair.sirmuel.design/">Altair GraphQL Client</a></p><p>Write the URL in the middle and press the <em>Docs</em> button on the right side.</p><h1 id="Generate-Site"><a href="#Generate-Site" class="headerlink" title="Generate Site"></a>Generate Site</h1><p>If you don’t want to use Altair like me, you can try the following way to generate the HTML doc instead.</p><p>First install the <em>graphdoc</em> tool if you have not. <a href="https://github.com/2fd/graphdoc">Official Repository</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g @2fd&#x2F;graphdoc</span><br></pre></td></tr></table></figure><p>After install you will be able to generate the documentation from a live endpoint:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">graphdoc -e http:&#x2F;&#x2F;localhost:8080&#x2F;graphql -o .&#x2F;doc&#x2F;schema</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;If you want to work with the graphQL, it is much easier if you can get the schema and documentation for graphQL. I test graphQL query using &lt;strong&gt;insomnia&lt;/strong&gt;. However the &lt;em&gt;DOC&lt;/em&gt; section in &lt;strong&gt;insomnia&lt;/strong&gt; doesn’t show the graphQL doc.&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Upgrade Marketing Cloud SDK</title>
    <link href="http://blog.jerryshan.com/2019/07/11/Upgrade%20Marketing%20Cloud%20SDK/"/>
    <id>http://blog.jerryshan.com/2019/07/11/Upgrade Marketing Cloud SDK/</id>
    <published>2019-07-11T04:00:00.000Z</published>
    <updated>2021-04-15T18:51:31.909Z</updated>
    
    <content type="html"><![CDATA[<p>I am working for Kinetic Commerce as Senior Mobile developer. We currently have a project called<code>ICMP</code>. It is an old project and this is my first time hands on the code. I am going to debug a problem where app crash when toggle the location service. After some time digging the code, I found that the project used an SDK:  <a href="https://github.com/salesforce-marketingcloud/JB4A-SDK-Android">https://github.com/salesforce-marketingcloud/JB4A-SDK-Android</a></p><span id="more"></span><p>This is currently deprecated. The old documentation site for version 4.5.0: <a href="https://salesforce-marketingcloud.github.io/JB4A-SDK-Android-v4.5.0/features/opendirect.html">Journey Builder for Apps Android SDK (v4.5.0) : OpenDirect</a></p><p>Now we need to upgrade to a newer version, see upgrade notes: <a href="http://salesforce-marketingcloud.github.io/JB4A-SDK-Android/">MarketingCloudSdk Android : Home</a>. The new version is 6.3.3, the new documentation site for version 6.3.3 is: <a href="https://salesforce-marketingcloud.github.io/MarketingCloudSDK-Android/">MarketingCloudSDK Android : Home</a></p><h1 id="Upgrade-Android-Repository"><a href="#Upgrade-Android-Repository" class="headerlink" title="Upgrade Android Repository"></a>Upgrade Android Repository</h1><p>What I did:</p><ol><li><p>Upgrade the maven repository address using the following:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">allprojects &#123;</span><br><span class="line">repositories &#123;</span><br><span class="line">&#x2F;&#x2F; ...</span><br><span class="line">maven &#123; url &quot;https:&#x2F;&#x2F;salesforce-marketingcloud.github.io&#x2F;MarketingCloudSDK-Android&#x2F;repository&quot; &#125;</span><br><span class="line">&#x2F;&#x2F; ...</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The url used to be <code>http://salesforce-marketingcloud.github.io/JB4A-SDK-Android/repository/</code></p></li><li><p>Upgrade sdk version import in build.gradle from <code>5.3.2</code> to <code>6.3.3</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; In coreconfig.gradle</span><br><span class="line">exactTarget &#x3D; &#39;6.3.3&#39;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; In build.gradle (app)</span><br><span class="line">implementation(&quot;com.salesforce.marketingcloud:marketingcloudsdk:$&#123;exactTarget&#125;&quot;) &#123;</span><br><span class="line">    exclude module: &quot;$&#123;salesForceBeaconLib&#125;&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>Since in <code>build.gradle</code> app the version imports from the variable <code>&#123;exactTarget&#125;</code>, I change the <code>&#123;exactTarget&#125;</code> in <code>coreconfig.gradle</code> from <em>5.3.2</em> to <em>6.3.3</em></p><ol start="3"><li>After all the gradle change, I sync the project. The project sync succeed. Building the app and has many compile issues. Now I need to solve these compile issues. The first one is <code>com.salesforce.marketingcloud.registration.Attribute</code> <strong>no longer exists</strong> in the new SDK version. By reading the reference page: <a href="https://salesforce-marketingcloud.github.io/JB4A-SDK-Android/javadocs/6.2/reference/com/salesforce/marketingcloud/registration/Registration.html#attributes">Registration| Marketing Cloud SDK</a>, I found that attributes property now becomes type: <code>abstract Map&lt;String, String&gt;</code>. So I changed every place where it uses Attribute project in to using <code>String</code> directly. <code>List&lt;Attribute&gt;</code> now becomes <code>Map&lt;String, String&gt;</code></li></ol><p>In <em>MarketingCloudManager.java</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Map&lt;String, String&gt; <span class="title">getRegistrationAttributes</span><span class="params">()</span></span>&#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>In <em>SettingsFragment.java</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setSwitch</span><span class="params">()</span></span>&#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isEnabled</span><span class="params">(Map.Entry&lt;String, String&gt; attr)</span> </span>&#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>Next compile issue is that there are some initialization builder setter function missing. For this, because I don’t understand what they used to be, its hard for me to knowing how to properly change those functions.</li></ol><p>In <em>KcpApplication.java</em>, In function <em>onCreate()</em>, under if statement <code>BuildConfig.PUSH</code>, there are lots of change under <em>MarketingCloudSdk.init</em>.</p><ul><li>Changed from <code>setGcmSenderId</code> into <code>setSenderId</code>.</li><li>Changed from <code>.setOpenDirectRecipient</code> into customize notification style</li><li>Changed from <code>setCloudPagesEnabled</code> into <code>setInboxEnabled</code>. According to <a href="https://help.salesforce.com/articleView?id=mc_rn_april_2018_mobilepush_sdk.htm&type=5">this 2018 release note.</a> (Search for <em>setCloudPagesEnabled</em>), cloud page methods is deprecated.</li></ul><p>For customize notification style: <a href="https://salesforce-marketingcloud.github.io/MarketingCloudSDK-Android/notifications/customize-notifications.html">MarketingCloudSDK Android : Customize Notification Handling</a>. The <a href="https://salesforce-marketingcloud.github.io/JB4A-SDK-Android-v4.5.0/features/opendirect.html">old</a> open direct url is outdated. Also moving channel name into customize notification handling as well.</p><p>In <em>KcpApplication.java</em>, in function <em>public void complete(InitializationStatus status)</em>, there it access to <code>status.locationPlayServicesStatus()</code> change to <code>status.playServicesStatus()</code>. <a href="https://salesforce-marketingcloud.github.io/JB4A-SDK-Android/javadocs/6.2/reference/com/salesforce/marketingcloud/InitializationStatus.html">This</a> is the reference.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;I am working for Kinetic Commerce as Senior Mobile developer. We currently have a project called&lt;code&gt;ICMP&lt;/code&gt;. It is an old project and this is my first time hands on the code. I am going to debug a problem where app crash when toggle the location service. After some time digging the code, I found that the project used an SDK:  &lt;a href=&quot;https://github.com/salesforce-marketingcloud/JB4A-SDK-Android&quot;&gt;https://github.com/salesforce-marketingcloud/JB4A-SDK-Android&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Add Test Device To Bitrise Manually</title>
    <link href="http://blog.jerryshan.com/2019/07/10/Add%20Test%20Device%20To%20Bitrise%20Manually/"/>
    <id>http://blog.jerryshan.com/2019/07/10/Add Test Device To Bitrise Manually/</id>
    <published>2019-07-10T04:00:00.000Z</published>
    <updated>2021-04-15T18:51:31.777Z</updated>
    
    <content type="html"><![CDATA[<p>This blog post is use to add a test device for a beta testers. Assume you don’t own the device and will need to add a test device remotely. Even if you own the device, you can still follow this guide.</p><span id="more"></span><h1 id="Get-UDID"><a href="#Get-UDID" class="headerlink" title="Get UDID"></a>Get UDID</h1><p>First you will need to get the UDID for the testing device.  <a href="https://betafamily.com/superudid">SuperUDID is the fastest way to find your iOS device UDID - Beta Family</a> this is a very useful tool to get the UDID for the testing device.</p><h1 id="Register-Device"><a href="#Register-Device" class="headerlink" title="Register Device"></a>Register Device</h1><p><em>First, register your device</em></p><h2 id="Register-Device-With-Apple"><a href="#Register-Device-With-Apple" class="headerlink" title="Register Device With Apple"></a>Register Device With Apple</h2><p><a href="https://help.apple.com/developer-account/#/dev40df0d9fa">Register a single device - Apple Help</a></p><p>Login to apple developer account, in <a href="https://developer.apple.com/account/resources">Certificates, Identifiers &amp; Profiles</a>, select device from the sidebar and click the add button. Select the platform, enter a device name (for your own reference), and the device ID (UDID). Click continue and review the registration information and click <strong>Register</strong>.</p><p><em>After register the device, you will need to add registered device to your provisioning profile</em></p><h2 id="Update-Provisioning-Profile"><a href="#Update-Provisioning-Profile" class="headerlink" title="Update Provisioning Profile"></a>Update Provisioning Profile</h2><p>Login to apple developer account, in <a href="https://developer.apple.com/account/resources">Certificates, Identifiers &amp; Profiles</a>, select profiles on the sidebar. Find the corresponding ad-hoc distribution profile, on the bottom, select the device you just registered.</p><p>Now click <em>save</em> and <em>download</em> to download the changed profile.</p><p>Login to <strong>Bitrise</strong>. Open your app, select <em>Workflow -&gt; Code Signing</em>, find the ad-hoc <em>PROVISIONING PROFILE</em> that you just edited in apple developer console, delete that and drag-in the updated file you just downloaded.</p><p><img src="provisioning-profile.png"></p><h2 id="Register-Device-with-Bitrise"><a href="#Register-Device-with-Bitrise" class="headerlink" title="Register Device with Bitrise"></a>Register Device with Bitrise</h2><p>First make sure you have registered device with apple and finish updating the <em>Provisioning Profile</em>.</p><p>Open your bitrise account settings profile’s <em>Test Devices</em> <a href="https://www.bitrise.io/me/profile#/test_devices">here</a>. Click <em>register manually</em>. Enter a device name for your own reference and the deviceID (UDID).</p><p>Now your device has successfully registered with Bitrise. To ensure, you can go to the <em>Workflow -&gt; Code Signing</em>, find the specific ad-hoc profile, click on <em>Show matching Certificates, Devices &amp; Capabilities</em>, and select <em>Devices</em> on the sidebar. Search for the UDID you just registered and you will see a <strong>REGISTERED ON BITRISE BY …</strong> on the right.</p><h1 id="Share-Build-to-Client-Testers"><a href="#Share-Build-to-Client-Testers" class="headerlink" title="Share Build to Client/Testers"></a>Share Build to Client/Testers</h1><p>Now once you have add tester’s device to your ad-hoc licence, you can then go-ahead, make a build and share that build to your tester so they can install the build on their device.  When making that build, first please make sure the build is signed using the ad-hoc provisioning profile contain the tester’s device.</p><p>After made the build, click <em>APPS &amp; ARTIFACTS</em>. Click on the eye button to view the detail of generated <em>.ipa</em>, scroll down and you will see a email sharing section. Write your tester’s email address, they will be received a email with a download link.</p><p><img src="IMG_F7A55977344B-1.jpg"></p><p>Then they can click on the <em>INSTALL</em> button to install on their devices.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;This blog post is use to add a test device for a beta testers. Assume you don’t own the device and will need to add a test device remotely. Even if you own the device, you can still follow this guide.&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Date Formatter</title>
    <link href="http://blog.jerryshan.com/2019/07/10/Date%20Formatter/"/>
    <id>http://blog.jerryshan.com/2019/07/10/Date Formatter/</id>
    <published>2019-07-10T04:00:00.000Z</published>
    <updated>2021-04-15T18:51:31.791Z</updated>
    
    <content type="html"><![CDATA[<p>A time formatter can format date / time string into a <em>Swift/Obj-c Date</em> object, vice-versa. It uses date format string to determine the format of the date / time string.</p><span id="more"></span><h1 id="Date-Format-String"><a href="#Date-Format-String" class="headerlink" title="Date Format String"></a>Date Format String</h1><p>For detail of how to wrote the date format string, you can visit <a href="https://nsdateformatter.com/">NSDateFormatter.com - Easy Skeezy Date Formatting for Swift and Objective-C</a>, it is very helpful.</p><p>Below information comes from <a href="https://developer.apple.com/documentation/foundation/dateformatter">DateFormatter - Foundation | Apple Developer Documentation</a> official document.</p><blockquote><p>When working with fixed format dates, such as RFC 3339, you set the <strong>dateFormat</strong> property to specify a format string. For most fixed formats, you should also set the <strong>locale</strong> property to a POSIX locale (<code>en_US_POSIX</code>), and set the <strong>timeZone</strong> property to UTC.  </p></blockquote><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="type">RFC3339DateFormatter</span> <span class="operator">=</span> <span class="type">DateFormatter</span>()</span><br><span class="line"><span class="type">RFC3339DateFormatter</span>.locale <span class="operator">=</span> <span class="type">Locale</span>(identifier: <span class="string">&quot;en_US_POSIX&quot;</span>)</span><br><span class="line"><span class="type">RFC3339DateFormatter</span>.dateFormat <span class="operator">=</span> <span class="string">&quot;yyyy-MM-dd&#x27;T&#x27;HH:mm:ssZZZZZ&quot;</span></span><br><span class="line"><span class="type">RFC3339DateFormatter</span>.timeZone <span class="operator">=</span> <span class="type">TimeZone</span>(secondsFromGMT: <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 39 minutes and 57 seconds after the 16th hour of December 19th, 1996 with an offset of -08:00 from UTC (Pacific Standard Time) */</span></span><br><span class="line"><span class="keyword">let</span> string <span class="operator">=</span> <span class="string">&quot;1996-12-19T16:39:57-08:00&quot;</span></span><br><span class="line"><span class="keyword">let</span> date <span class="operator">=</span> <span class="type">RFC3339DateFormatter</span>.date(from: string)</span><br></pre></td></tr></table></figure><h1 id="Trouble-Shooting"><a href="#Trouble-Shooting" class="headerlink" title="Trouble Shooting"></a>Trouble Shooting</h1><p>2019-06-10: When you are sure that the date format is correct, but it is return <em>nil</em> after format the date on some devices, please setup a locale.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> dateFormatter <span class="operator">=</span> <span class="type">DateFormatter</span>()</span><br><span class="line">dateFormatter.locale <span class="operator">=</span> <span class="type">Locale</span>(identifier: <span class="string">&quot;en_US_POSIX&quot;</span>)</span><br></pre></td></tr></table></figure><p>Without that, on some device, it will fail to format 24 hours format <em>HH</em>.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;A time formatter can format date / time string into a &lt;em&gt;Swift/Obj-c Date&lt;/em&gt; object, vice-versa. It uses date format string to determine the format of the date / time string.&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Upload Missing Required DSYMs</title>
    <link href="http://blog.jerryshan.com/2019/07/10/Upload%20Missing%20Required%20DSYMs/"/>
    <id>http://blog.jerryshan.com/2019/07/10/Upload Missing Required DSYMs/</id>
    <published>2019-07-10T04:00:00.000Z</published>
    <updated>2021-04-15T18:51:31.909Z</updated>
    
    <content type="html"><![CDATA[<p>If you use firebase crashlytics and it says <em>Upload missing required dSYMs</em>, here is how you can upload it manually.</p><span id="more"></span><h1 id="Upload-DSYMs-Manually"><a href="#Upload-DSYMs-Manually" class="headerlink" title="Upload DSYMs Manually"></a>Upload DSYMs Manually</h1><p>Here is a <a href="https://docs.fabric.io/apple/crashlytics/missing-dsyms.html">All about Missing dSYMs — Fabric for Apple  documentation</a> usually link for uploading dSYMs for iOS.</p><p>First <em>archive</em> the project as normal, and click <em>Download dSYMs</em> button in Xcode’s Organizer.</p><p><img src="Upload%20Missing%20Required%20DSYMs/xcode-download-dsyms.png"></p><p>Now open project files, you can find a folder called dSYMs. Zip the folder and upload manually to the console.</p><p><img src="Upload%20Missing%20Required%20DSYMs/Screen_Shot_2019-07-10_at_4_23_13_PM.png"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;If you use firebase crashlytics and it says &lt;em&gt;Upload missing required dSYMs&lt;/em&gt;, here is how you can upload it manually.&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Fish Terminal Fuzzy Finding</title>
    <link href="http://blog.jerryshan.com/2019/07/09/Fish%20Terminal%20Fuzzy%20Finding%20%E2%80%9Cfzf%E2%80%9D/"/>
    <id>http://blog.jerryshan.com/2019/07/09/Fish Terminal Fuzzy Finding “fzf”/</id>
    <published>2019-07-09T04:00:00.000Z</published>
    <updated>2021-04-15T18:51:31.804Z</updated>
    
    <content type="html"><![CDATA[<p><em>fzf</em> is a very important terminal tool that will adds a big help to your terminal. It is fuzzy find everything. A better companion to your fish terminal auto completion.</p><span id="more"></span><p><a href="https://github.com/junegunn/fzf">GitHub - junegunn/fzf: A command-line fuzzy finder</a></p><h1 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">brew install fzf</span><br><span class="line">/usr/<span class="built_in">local</span>/opt/fzf/install</span><br></pre></td></tr></table></figure><p>Use first command to install from <em>brew</em> and second command to enable keyboard shortcut after installed.</p><p><strong>(Optional)</strong><br>Install <code>tac</code> if you want to use <code>bcd</code> or <code>rcd</code>. See <em>Advanced Usage</em> for details.</p><h1 id="Keyboard-Shortcut"><a href="#Keyboard-Shortcut" class="headerlink" title="Keyboard Shortcut"></a>Keyboard Shortcut</h1><p>Use <em>Ctrl-R</em> to browse history.<br>Use <em>Ctrl-T</em> to open anything.</p><p>Some useful example would be:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd &lt;Ctrl-T&gt;</span><br><span class="line">vim &lt;Ctrl-T&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Any Command + &lt;Ctrl-R&gt;</span><br></pre></td></tr></table></figure><p>This will search history related to command you type first.</p><h1 id="Advanced-Usage"><a href="#Advanced-Usage" class="headerlink" title="Advanced Usage"></a>Advanced Usage</h1><p>Visit <a href="https://github.com/junegunn/fzf/wiki/Examples-(fish)">https://github.com/junegunn/fzf/wiki/Examples-(fish)</a> for examples of fish functions.</p><h2 id="Replace-Auto-Complete"><a href="#Replace-Auto-Complete" class="headerlink" title="Replace Auto-Complete"></a>Replace Auto-Complete</h2><p>Call <code>fzf_complete</code> to enable auto-complete using fzf (replace fish <em>tab</em> autocomplete) temporary just in this section.</p><p>This is not idea. You may not want to use this every time. One of the drawback is you can only press tab to work in the beginning of a word. No longer work on typing half the word and then <em>tab</em>.</p><h2 id="Cd-Related"><a href="#Cd-Related" class="headerlink" title="Cd Related"></a>Cd Related</h2><p>Call <code>bcd</code> to go <em>cd backwards</em>. Call <code>rcd</code> to <em>cd to one of the previously visited locations</em>.</p><h2 id="Git-Related"><a href="#Git-Related" class="headerlink" title="Git Related"></a>Git Related</h2><p>Call <code>fco</code> to fuzzy find and check out to a branch. <code>fcoc</code> to fuzzy find and checkout a commit</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;em&gt;fzf&lt;/em&gt; is a very important terminal tool that will adds a big help to your terminal. It is fuzzy find everything. A better companion to your fish terminal auto completion.&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Setup Apple Push Notification</title>
    <link href="http://blog.jerryshan.com/2019/06/28/Setup%20APN%20Notification/"/>
    <id>http://blog.jerryshan.com/2019/06/28/Setup APN Notification/</id>
    <published>2019-06-28T04:00:00.000Z</published>
    <updated>2021-04-15T18:51:31.832Z</updated>
    
    <content type="html"><![CDATA[<p>Basic about setting up push notification (2019)</p><span id="more"></span><h1 id="Enable-Push-Notification"><a href="#Enable-Push-Notification" class="headerlink" title="Enable Push Notification"></a>Enable Push Notification</h1><p>The first step is to enable push notification under <em>Target -&gt; Capabilities</em>.  See screenshot below.</p><p><img src="Screen%20Shot%202019-06-28%20at%2012.56.53%20PM.png"></p><p>Then you will need to create an authentication key file for push notification under your developer team account. Note that you will need an account with admin privilege to do this. Note that this has been changed a little bit compare to the old time. It has become much simpler.</p><p><img src="Screen%20Shot%202019-06-28%20at%201.02.36%20PM.png"></p><p><em>Create a key:</em><br><img src="Screen%20Shot%202019-06-28%20at%201.03.03%20PM.png"></p><h1 id="Remote-Notification-Registration"><a href="#Remote-Notification-Registration" class="headerlink" title="Remote Notification Registration"></a>Remote Notification Registration</h1><p>So you have finished all the preparation, now its time to implement the APN in your project. The first thing you will need to do is to ask for notification permission. Then you will need to register device for the remote notification after user gives the permission. Waiting for callback to extract the device token.</p><p>For all these, here is a sample code written in <code>AppDelegate.swift</code>:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">registerForPushNotifications</span>()</span> &#123;</span><br><span class="line">    <span class="type">UNUserNotificationCenter</span>.current()</span><br><span class="line">        .requestAuthorization(options: [.alert, .sound, .badge]) &#123;</span><br><span class="line">            [<span class="keyword">weak</span> <span class="keyword">self</span>] granted, error <span class="keyword">in</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;TEST_PUSH: Permission granted: <span class="subst">\(granted)</span>&quot;</span>)</span><br><span class="line">            <span class="keyword">guard</span> granted <span class="keyword">else</span> &#123; <span class="keyword">return</span> &#125;</span><br><span class="line">            <span class="keyword">self</span><span class="operator">?</span>.getNotificationSettings()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getNotificationSettings</span>()</span> &#123;</span><br><span class="line">    <span class="type">UNUserNotificationCenter</span>.current().getNotificationSettings &#123; settings <span class="keyword">in</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;TEST_PUSH: Notification settings: <span class="subst">\(settings)</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">guard</span> settings.authorizationStatus <span class="operator">==</span> .authorized <span class="keyword">else</span> &#123; <span class="keyword">return</span> &#125;</span><br><span class="line">        <span class="type">DispatchQueue</span>.main.async &#123;</span><br><span class="line">            <span class="type">UIApplication</span>.shared.registerForRemoteNotifications()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">application</span>(<span class="keyword">_</span> <span class="params">application</span>: <span class="type">UIApplication</span>, <span class="params">didRegisterForRemoteNotificationsWithDeviceToken</span> <span class="params">deviceToken</span>: <span class="type">Data</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> tokenParts <span class="operator">=</span> deviceToken.map &#123; data <span class="keyword">in</span> <span class="type">String</span>(format: <span class="string">&quot;%02.2hhx&quot;</span>, data) &#125;</span><br><span class="line">    <span class="keyword">let</span> token <span class="operator">=</span> tokenParts.joined()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;TEST_PUSH: Device Token: <span class="subst">\(token)</span>&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">application</span>(<span class="keyword">_</span> <span class="params">application</span>: <span class="type">UIApplication</span>, <span class="params">didFailToRegisterForRemoteNotificationsWithError</span> <span class="params">error</span>: <span class="type">Error</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;TEST_PUSH: Failed to register push notification: <span class="subst">\(error)</span>&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">application</span>(<span class="keyword">_</span> <span class="params">application</span>: <span class="type">UIApplication</span>, <span class="params">didFinishLaunchingWithOptions</span> <span class="params">launchOptions</span>: [<span class="type">UIApplication</span>.<span class="params">LaunchOptionsKey</span>: <span class="keyword">Any</span>]<span class="operator">?</span>)</span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">    registerForPushNotifications()</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>For the above code:</p><ol><li>Call <em>registerForPushNotification</em> in <em>didFinishLaunchingWithOptions</em></li><li>Call <em>getNotificationSettings</em> to get current notification setting and if its <em>.authorized</em>, <em>registerForRemoteNotification</em></li><li>Get device token in <em>didRegisterForRemoteNotificationWithDeviceToken</em> and upload to your own server if needed. (Upload to my server is not include in above sample code)</li><li></li></ol><hr><p>🧪 At this stage, you will be able to send a APN to your testing device using the device token and able to see the push notification popup.</p><hr><h1 id="Testing"><a href="#Testing" class="headerlink" title="Testing"></a>Testing</h1><p>Now you can test to see if your implementation works.</p><h2 id="Testing-Utility-Tool"><a href="#Testing-Utility-Tool" class="headerlink" title="Testing Utility Tool"></a>Testing Utility Tool</h2><p><a href="https://github.com/onmyway133/PushNotifications">GitHub - onmyway133/PushNotifications: 🐉 A macOS, Linux, Windows app to test push notifications on iOS and Android</a></p><p>This is a very useful tool to test your push notification to make sure it works.</p><p>For sending an APN, you will need following information:</p><ol><li>Team ID</li><li>Key ID</li><li>Key File (created above)</li><li>Device Token</li></ol><p>You can get the team id by login to your development account and select <strong>Membership</strong> on the left panel. You can get the key id when you create the key file.</p><h2 id="Send-APN-Via-HTTP-Protocol-Restful-Api"><a href="#Send-APN-Via-HTTP-Protocol-Restful-Api" class="headerlink" title="Send APN Via HTTP Protocol (Restful Api)"></a>Send APN Via HTTP Protocol (Restful Api)</h2><p><a href="https://developer.apple.com/documentation/usernotifications/setting_up_a_remote_notification_server/sending_notification_requests_to_apns">Sending Notification Requests to APNs | Apple Developer Documentation</a></p><p>See above official documentation to construct a notification post request. Note that you will need to encrypt your key file into <em>Authentication</em> header value. See below for detail for encryption.</p><p><a href="https://developer.apple.com/documentation/usernotifications/setting_up_a_remote_notification_server/establishing_a_token-based_connection_to_apns">Establishing a Token-Based Connection to APNs | Apple Developer Documentation</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Basic about setting up push notification (2019)&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>iOS Multiple Firebase Apps For One Project</title>
    <link href="http://blog.jerryshan.com/2019/06/28/iOS%20Multiple%20Firebase%20Apps%20For%20One%20Project/"/>
    <id>http://blog.jerryshan.com/2019/06/28/iOS Multiple Firebase Apps For One Project/</id>
    <published>2019-06-28T04:00:00.000Z</published>
    <updated>2021-04-15T18:51:31.929Z</updated>
    
    <content type="html"><![CDATA[<p>There are two ways to choose different <code>GoogleService-Info.plist</code>. One is recommended in the official documentation as <em>Run Time Configuration</em>. The other is what I use to replace configuration before compile using <em>Run Script</em>.</p><span id="more"></span><p>Here is the official documentation: <a href="https://firebase.google.com/docs/projects/multiprojects">Configure multiple projects  |  Firebase</a></p><h1 id="Run-Time-Configuration"><a href="#Run-Time-Configuration" class="headerlink" title="Run Time Configuration"></a>Run Time Configuration</h1><p>For run time configuration, navigate to <a href="https://firebase.google.com/docs/projects/multiprojects#support_multiple_environments_in_your_ios_application">Configure multiple projects  |  Firebase</a> for official documentation.</p><h1 id="Compile-Time-Configuration"><a href="#Compile-Time-Configuration" class="headerlink" title="Compile Time Configuration"></a>Compile Time Configuration</h1><p><strong>This is what I choose to do and how I do it. You can choose to use this method or not by your own choice.</strong></p><p>First download all the <em>GoogleService-Info.plist</em> into your project. You can put it anywhere you want. Remember append something at the end of the file name. For example:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">-- Main Project</span><br><span class="line">| -- Project Folder</span><br><span class="line">| -- AppDelegate.swift</span><br><span class="line">| -- Firebase</span><br><span class="line">|-- GoogleService-Info-uat.plist</span><br><span class="line">|-- GoogleService-Info-release.plist</span><br></pre></td></tr></table></figure><p>When adding files into the project, choose the correct target file is corresponding to. (You can also choose all targets if you want).</p><p>Then in the <em>Target -&gt; Build Phases</em>, create a <em>Run Script</em>, drag it above the <em>Copy Bundle Resources</em>, and write the following script:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">PATH_TO_GOOGLE_PLISTS=<span class="string">&quot;<span class="variable">$&#123;PROJECT_DIR&#125;</span>/&lt;1&gt;/Application/Firebase&quot;</span></span><br><span class="line">cp <span class="string">&quot;<span class="variable">$PATH_TO_GOOGLE_PLISTS</span>/GoogleService-Info-&lt;2&gt;.plist&quot;</span> <span class="string">&quot;<span class="variable">$&#123;BUILT_PRODUCTS_DIR&#125;</span>/<span class="variable">$&#123;PRODUCT_NAME&#125;</span>.app/GoogleService-Info.plist&quot;</span></span><br></pre></td></tr></table></figure><p>Replace: ::&lt;1&gt;:: with project folder name. ::&lt;2&gt;:: with the correct filename you appended.</p><p>The script will copy the <em>plist</em> file into the build binary root.</p><p>Why build binary root? You can of course copy to your project root before compile stage. However, it will then create a git difference. Copy to the binary file can direct avoid this problem.</p><blockquote><p>By default, <code>FirebaseApp.configure()</code> will load the <code>GoogleService-Info.plist</code> file bundled with the application.  </p></blockquote><p>Therefore, this method works.</p><p>I use this method in Lowes Loyalty app when working for <a href="https://kineticcommerce.com/">Kinetic</a>.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;There are two ways to choose different &lt;code&gt;GoogleService-Info.plist&lt;/code&gt;. One is recommended in the official documentation as &lt;em&gt;Run Time Configuration&lt;/em&gt;. The other is what I use to replace configuration before compile using &lt;em&gt;Run Script&lt;/em&gt;.&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Firebase Cloud Messaging Send Message Via HTTP Protocol</title>
    <link href="http://blog.jerryshan.com/2019/06/25/Firebase%20Cloud%20Messaging%20Send%20Message%20Via%20HTTP%20Protocol/"/>
    <id>http://blog.jerryshan.com/2019/06/25/Firebase Cloud Messaging Send Message Via HTTP Protocol/</id>
    <published>2019-06-25T04:00:00.000Z</published>
    <updated>2021-04-15T18:51:31.802Z</updated>
    
    <content type="html"><![CDATA[<p>How do I send a message to device using Restful API?</p><span id="more"></span><h1 id="Setup-Post-Method"><a href="#Setup-Post-Method" class="headerlink" title="Setup Post Method"></a>Setup Post Method</h1><p>The <strong>Url</strong>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;fcm.googleapis.com&#x2F;fcm&#x2F;send</span><br></pre></td></tr></table></figure><p>The <strong>Header</strong>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&quot;Content-Type&quot;: &quot;application&#x2F;json&quot;,</span><br><span class="line">&quot;Authorization&quot;: &quot;key&#x3D;&lt;API_KEY&gt;&quot;</span><br></pre></td></tr></table></figure><p>Replace <em><API_KEY></em> to your api key on firebase.</p><p>The <strong>BODY</strong>:<br>Check <a href="https://firebase.google.com/docs/cloud-messaging/http-server-ref">Http-Server-Ref</a> and <a href="https://firebase.google.com/docs/cloud-messaging/concept-options#notifications_and_data_messages">About FCM messages  |  Firebase</a> official documentation for detail <em>JSON</em> object you can use.</p><p>There are three type of notifications.</p><ol><li>Notification Messages</li><li>Data messages</li><li>Notification With Data Payloads.</li></ol><p>For <strong>Notification Messages</strong>, android display the heads-up notification depends on the <em>JSON</em> you send. (title, subtitle, icon, etc.). Will simply launch app when click on the message. If you want specific behaviour after click on message, you can choose <strong>Data Messages</strong> or <strong>Notification With Data Payloads</strong></p><p>For <strong>Data Messages</strong>, app will call <em>OnMessageReceived</em> to handle the message as soon as it gets received. The method will be fired even if the app not opened. You will need to create heads-up message yourself under function <em>OnMessageReceived</em></p><p>You can also build a push notification with both <em>Notification Messages</em> and <em>Data Messages</em>. I call it <strong>Notification With Data Payloads</strong>. In this case, android first display the heads-up notification depends on <em>JSON</em> in the notification section: (title, subtitle, icon) etc. If you have specify the <em>”click_action”</em> in the notification section, it will launch the activity you specified there and put all the data payloads into the activity intent extras.</p><h2 id="Notification-Messages"><a href="#Notification-Messages" class="headerlink" title="Notification Messages"></a>Notification Messages</h2><p>For <strong>BODY</strong> of <em>Notification Messages</em>:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">&quot;to&quot;</span>: “&lt;DEVICE_TOKEN&gt;“,</span><br><span class="line"><span class="attr">&quot;notification&quot;</span>: &#123;</span><br><span class="line"><span class="attr">&quot;title&quot;</span>: “This is the notification title“,</span><br><span class="line"><span class="attr">&quot;body&quot;</span>: “This is the notification body.”,</span><br><span class="line"><span class="attr">&quot;click_action&quot;</span>: <span class="string">&quot;lowes.notification.launch.activity”,</span></span><br><span class="line"><span class="string">“icon”: “ic_notification_icon”</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><p><em>to</em>: Device token<br><em>notification</em>: The notification object.<br><em>title</em>: Title for notification.<br><em>body</em>: Body for notification<br><em>click_action</em>: The click action for notification. Usually be some kinds of activity to launch. (<em>OPTIONAL</em>)<br><em>icon</em>: The small icon for notification. String for drawable resource. (<em>OPTIONAL</em>). With out icon, a default one will be used if meta data is implemented in android manifest file.</p><h2 id="Data-Messages"><a href="#Data-Messages" class="headerlink" title="Data Messages"></a>Data Messages</h2><p>For <strong>BODY</strong> of <em>Data Messages</em>:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">&quot;to&quot;</span>: “&lt;DEVICE_TOKEN&gt;“,</span><br><span class="line"><span class="attr">&quot;data&quot;</span>: &#123;</span><br><span class="line"><span class="attr">&quot;title&quot;</span>: <span class="string">&quot;How was your recent purchase?&quot;</span>,</span><br><span class="line"><span class="attr">&quot;body&quot;</span>: <span class="string">&quot;We hope you&#x27;re enjoying your recent purchase.&quot;</span>,</span><br><span class="line"><span class="attr">&quot;deep-link&quot;</span>: <span class="string">&quot;xxx://xxxx&quot;</span>,</span><br><span class="line"><span class="attr">&quot;http-link&quot;</span>: <span class="string">&quot;http://xxxxx&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em>to</em>: Device token<br>“data”: Any self-defined data object.</p><p>The data object can be anything self-defined. Just make sure you implement the same key in the <em>onNotificationReceived</em> for your custom object extends <em>FirebaseMessagingService</em></p><h2 id="Notification-With-Data-Payloads"><a href="#Notification-With-Data-Payloads" class="headerlink" title="Notification With Data Payloads"></a>Notification With Data Payloads</h2><p>For <strong>BODY</strong> of <em>Notification With Data Payloads</em></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">&quot;to&quot;</span>: “&lt;DEVICE_TOKEN&gt;“,</span><br><span class="line"><span class="attr">&quot;notification&quot;</span>: &#123;</span><br><span class="line"><span class="attr">&quot;title&quot;</span>: <span class="string">&quot;How was your recent purchase?&quot;</span>,</span><br><span class="line"><span class="attr">&quot;body&quot;</span>: <span class="string">&quot;We hope you&#x27;re enjoying your recent purchase.&quot;</span>,</span><br><span class="line"><span class="attr">&quot;subtitle&quot;</span>: <span class="string">&quot;How was your recent purchase?&quot;</span>,</span><br><span class="line"><span class="attr">&quot;click_action&quot;</span>: <span class="string">&quot;lowes.notification.launch.activity&quot;</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">&quot;data&quot;</span>: &#123;</span><br><span class="line"><span class="attr">&quot;rich-data&quot;</span>: <span class="string">&quot;testing rich-data&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>For detail of each field, visit <a href="bear://x-callback-url/open-note?id=0CD1A854-6756-4D64-9FA2-2B3924A30D90-77303-0000452D40E36C80&header=Notification%20Messages">Notification Messages</a> and <a href="bear://x-callback-url/open-note?id=0CD1A854-6756-4D64-9FA2-2B3924A30D90-77303-0000452D40E36C80&header=Data%20Messages">Data Messages</a>. This is just a combination of the two.</p><p>However, please notice that the <em>“click_action”</em> here becomes required. Because you will need it to launch the activity to handle the data payload. After the activity launched, get the payload data hash map by accessing <code>getIntents().getExtras()</code></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;How do I send a message to device using Restful API?&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Firebase Cloud Messaging Setup</title>
    <link href="http://blog.jerryshan.com/2019/06/25/Firebase%20Cloud%20Messaging%20Setup/"/>
    <id>http://blog.jerryshan.com/2019/06/25/Firebase Cloud Messaging Setup/</id>
    <published>2019-06-25T04:00:00.000Z</published>
    <updated>2021-04-15T18:51:31.802Z</updated>
    
    <content type="html"><![CDATA[<p>Everything about setting up Android project with Firebase Cloud Messaging.</p><span id="more"></span><h1 id="Adding-Firebase"><a href="#Adding-Firebase" class="headerlink" title="Adding Firebase"></a>Adding Firebase</h1><p>If your project have not used firebase before, follow <a href="https://firebase.google.com/docs/android/setup">Add Firebase to your Android project  |  Firebase</a> official documentation to add the firebase SDK.</p><p>In your project-root <em>build.gradle</em>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; Top-level build file where you can add configuration options common to all sub-projects&#x2F;modules.</span><br><span class="line"></span><br><span class="line">buildscript &#123;</span><br><span class="line">    ext.kotlin_version &#x3D; &#39;1.3.21&#39;</span><br><span class="line">    repositories &#123;</span><br><span class="line">  &#x2F;&#x2F;...</span><br><span class="line">        google()</span><br><span class="line">    &#125;</span><br><span class="line">    dependencies &#123;</span><br><span class="line">  &#x2F;&#x2F;...</span><br><span class="line">        classpath &#39;com.google.gms:google-services:4.2.0&#39;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">allprojects &#123;</span><br><span class="line">    repositories &#123;</span><br><span class="line">  &#x2F;&#x2F;...</span><br><span class="line">        google()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Trouble Shooting</strong><br>If you see error message of merge <em>android support library</em> with <em>androidx</em> failed, upgrade your android project with <em>androidx</em> using  <a href="https://developer.android.com/jetpack/androidx/migrate">Migrating to AndroidX</a></p><h2 id="Multiple-Google-Services-Json"><a href="#Multiple-Google-Services-Json" class="headerlink" title="Multiple Google Services Json"></a>Multiple Google Services Json</h2><p>If you have multiple build variant / flavour, you probably want to use different <code>google-services.json</code> depends on different build variant. The answer is yes, you can. <a href="https://stackoverflow.com/a/42086133/2581637">Here</a> is a stack-overflow answer that might help.</p><p>For detail, do something like following:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">|-- Project</span><br><span class="line">|-- app</span><br><span class="line">|-- src</span><br><span class="line">|-- production</span><br><span class="line">|-- google-services.json</span><br><span class="line">|-- staging</span><br><span class="line">|-- google-services.json</span><br><span class="line">|-- debug</span><br><span class="line">|-- google-services.json</span><br></pre></td></tr></table></figure><h1 id="Import-Firebase-Messaging-Framework"><a href="#Import-Firebase-Messaging-Framework" class="headerlink" title="Import Firebase Messaging Framework"></a>Import Firebase Messaging Framework</h1><p>In your app-level <em>build.gradle</em> file:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">apply plugin: &#39;com.android.application&#39;</span><br><span class="line"></span><br><span class="line">android &#123;</span><br><span class="line"> &#x2F;&#x2F; ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">apply plugin: &#39;com.google.gms.google-services&#39;</span><br><span class="line">dependencies &#123;</span><br><span class="line">    implementation &#39;com.google.firebase:firebase-core:17.0.0&#39;</span><br><span class="line">    implementation &#39;com.google.firebase:firebase-messaging:19.0.0&#39;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>After import the object, create a firebase messaging service by create an object in your codebase that extends <em>FirebaseMessagingService</em>. Here is an example in <a href="https://github.com/firebase/quickstart-android/blob/9d2c53324e6797eae93b2536110b80f3eed27850/messaging/app/src/main/java/com/google/firebase/quickstart/fcm/java/MyFirebaseMessagingService.java">Java</a> or <a href="https://github.com/firebase/quickstart-android/blob/master/messaging/app/src/main/java/com/google/firebase/quickstart/fcm/kotlin/MyFirebaseMessagingService.kt">Kotlin</a></p><p>Here is an example I created in Kotlin:</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> services</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.util.Log</span><br><span class="line"><span class="keyword">import</span> com.google.firebase.messaging.FirebaseMessagingService</span><br><span class="line"><span class="keyword">import</span> com.google.firebase.messaging.RemoteMessage</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LowesFirebaseMessagingService</span>: <span class="type">FirebaseMessagingService</span></span>() &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">companion</span> <span class="keyword">object</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> <span class="keyword">val</span> TAG = <span class="string">&quot;LowesFirebaseMessaging&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * here are two types of messages data messages and notification messages. Data messages are handled</span></span><br><span class="line"><span class="comment">     * here in onMessageReceived whether the app is in the foreground or background. Data messages are the type</span></span><br><span class="line"><span class="comment">     * traditionally used with GCM. Notification messages are only received here in onMessageReceived when the app</span></span><br><span class="line"><span class="comment">     * is in the foreground. When the app is in the background an automatically generated notification is displayed.</span></span><br><span class="line"><span class="comment">     * When the user taps on the notification they are returned to the app. Messages containing both notification</span></span><br><span class="line"><span class="comment">     * and data payloads are treated as notification messages.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> p0: The remote push notification message received.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onMessageReceived</span><span class="params">(p0: <span class="type">RemoteMessage</span>?)</span></span> &#123;</span><br><span class="line">        Log.d(TAG, <span class="string">&quot;From: <span class="subst">$&#123;p0?.from&#125;</span>&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Called if InstanceID token is updated. This may occur if the security of</span></span><br><span class="line"><span class="comment">     * the previous token had been compromised. Note that this is called when the InstanceID token</span></span><br><span class="line"><span class="comment">     * is initially generated so this is where you would retrieve the token.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> p0: The new token in string.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onNewToken</span><span class="params">(p0: <span class="type">String</span>?)</span></span> &#123;</span><br><span class="line">        Log.d(TAG, <span class="string">&quot;Refreshed token: <span class="variable">$p0</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment">// <span class="doctag">TODO:</span> Send the new token to our backend server.</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>After created the above class, head to the <em>AndroidManifest.xml</em>, add the following service in between the <em><application></em> tag:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;application</span><br><span class="line">    android:name&#x3D;&quot;presentation.application.myApplication&quot;</span><br><span class="line">    ....&gt;</span><br><span class="line">  ...</span><br><span class="line">    &lt;service</span><br><span class="line">      android:name&#x3D;&quot;services.LowesFirebaseMessagingService&quot;</span><br><span class="line">      android:exported&#x3D;&quot;false&quot;&gt;</span><br><span class="line">      &lt;intent-filter&gt;</span><br><span class="line">          &lt;action android:name&#x3D;&quot;com.google.firebase.MESSAGING_EVENT&quot; &#x2F;&gt;</span><br><span class="line">      &lt;&#x2F;intent-filter&gt;</span><br><span class="line">    &lt;&#x2F;service&gt;</span><br><span class="line">  ...</span><br><span class="line">&lt;&#x2F;application</span><br></pre></td></tr></table></figure><p>The <em>android:name</em> is the package path for the object created above.</p><h2 id="Get-device-token"><a href="#Get-device-token" class="headerlink" title="Get device token"></a>Get device token</h2><p>Write the following code into your app to get the device token: (For <em>Java</em>/<em>Kotlin</em>)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">FirebaseInstanceId.getInstance().getInstanceId()</span><br><span class="line">    .addOnCompleteListener(<span class="keyword">new</span> OnCompleteListener&lt;InstanceIdResult&gt;() &#123;</span><br><span class="line">      <span class="meta">@Override</span></span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onComplete</span><span class="params">(<span class="meta">@NonNull</span> Task&lt;InstanceIdResult&gt; task)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!task.isSuccessful()) &#123;</span><br><span class="line">          Log.w(TAG, <span class="string">&quot;getInstanceId failed&quot;</span>, task.getException());</span><br><span class="line">          <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Get new Instance ID token</span></span><br><span class="line">        String token = task.getResult().getToken();</span><br><span class="line">        Log.d(TAG, token);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// <span class="doctag">TODO:</span> Send device token to our server</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">FirebaseInstanceId.getInstance().instanceId</span><br><span class="line">    .addOnCompleteListener(OnCompleteListener &#123; task -&gt;</span><br><span class="line">      <span class="keyword">if</span> (!task.isSuccessful) &#123;</span><br><span class="line">        Log.w(TAG, <span class="string">&quot;getInstanceId failed&quot;</span>, task.exception)</span><br><span class="line">        <span class="keyword">return</span><span class="symbol">@OnCompleteListener</span></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// Get new Instance ID token</span></span><br><span class="line">      <span class="keyword">val</span> token = task.result?.token</span><br><span class="line">      Log.d(TAG, token)</span><br><span class="line"></span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span> Send device token to our server</span></span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><p><strong>Note:</strong> The token can get renewed or refreshed under certain conditions. Implement the callback <code>onNewToken</code> in the object extends <em>FirebaseMessagingService</em> to get noticed.</p><hr><p>🧪 Now you can try to <strong>send a notification to your testing device</strong> using the device token. The notification banner (Heads up notification) may not appear. However, you can still break or print from the method <em>onMessageReceived</em> to see the payload data or notification title.</p><hr><h1 id="Create-Notification"><a href="#Create-Notification" class="headerlink" title="Create Notification"></a>Create Notification</h1><p>So now if you send a notification to your testing device, it will vibrate and nothing more will happen. This is because in the <em>onMessageReceived</em> callback, currently you only log the notification received. You didn’t create the notification. Here is how to create a  <a href="https://developer.android.com/guide/topics/ui/notifiers/notifications?hl=en#Heads-up">Heads-Up Notification</a></p><p>(If you are sending a notification only type message you will be able to see the notification at this stage. See below for detail.)</p><p>Before create any heads-up notification, here is what you need to know. There are two type of notification in FCM (<em>Firebase Cloud Messaging</em>)</p><ol><li>Notification messages.</li><li>Data messages.</li></ol><p>See <a href="https://firebase.google.com/docs/cloud-messaging/concept-options#notifications_and_data_messages">About FCM messages  |  Firebase</a> for detail.</p><h2 id="Notification-Messages-vs-Data-Messages"><a href="#Notification-Messages-vs-Data-Messages" class="headerlink" title="Notification Messages vs. Data Messages."></a>Notification Messages vs. Data Messages.</h2><p>[If you want to know how to send different type of push notification via http-protocol (<em>Restful Api</em>), see the other notes: <em>Firebase Cloud Messaging Send Message Via HTTP Protocol</em>.]</p><p>For <strong>Notification Messages</strong>, android display the heads-up notification depends on the <em>JSON</em> you send. (title, subtitle, icon, etc.). Will simply launch app when click on the message. If you want specific behaviour after click on message, you can choose <strong>Data Messages</strong> or <strong>Notification With Data Payloads</strong></p><p>For <strong>Data Messages</strong>, app will call <em>OnMessageReceived</em> to handle the message as soon as it gets received. The method will be fired even if the app not opened. You will need to create heads-up message yourself under function <em>OnMessageReceived</em></p><p>You can also build a push notification with both <em>Notification Messages</em> and <em>Data Messages</em>. I call it <strong>Notification With Data Payloads</strong>. In this case, android first display the heads-up notification depends on <em>JSON</em> in the notification section: (title, subtitle, icon) etc. If you have specify the <em>”click_action”</em> in the notification section, it will launch the activity you specified there and put all the data payloads into the activity intent extras.</p><p>I would suggest to use <strong>Data Messages</strong> directly for more flexible. With <strong>Data Message</strong> you will be able to change layout, or even use custom layout. There’s no disadvantage because the <em>OnMessageReceived</em> gets called even when app gets killed.</p><h2 id="Notification-Icons"><a href="#Notification-Icons" class="headerlink" title="Notification Icons"></a>Notification Icons</h2><p>There are two kinds of icons displayed in the <em>Notification Center</em>. A <strong>small icon</strong> and a <strong>large icon</strong>.</p><p>The <strong>large icon</strong> only used when you create the heads-up notification manually with <em>Data messages</em>.</p><p>The setup process for icon is different depends on different type of messages.  I found an image below from <a href="https://documentation.onesignal.com/docs/customize-notification-icons">this site</a> , it shows how small icon and large icon displayed.<br><img src="Screen%20Shot%202019-06-26%20at%201.49.57%20PM.png"></p><p>After my investigation of all different notification styles, there are two different style. The first one is the showing the status above and title / description below, the second one is showing an icon on the left and title / description on the right. For Api level &gt; API_23, they use second style. For Api level &lt;= API_23, they use the first style.</p><hr><p>I tested on Android 6 (Nexus 5), there is a problem. It will use a large icon with a small icon combo, and if there is a problem which I setup the icon properly but <strong>it shows a white cube</strong>. Why is that happening?</p><p>Because on old device the notification icon should be entirely white. (The outlines has to be white with transparent background). Try <a href="https://romannurik.github.io/AndroidAssetStudio/icons-notification.html#source.type=clipart&source.clipart=ac_unit&source.space.trim=1&source.space.pad=0&name=ic_stat_ac_unit">Android Asset Studio</a> to generate a notification icon properly.</p><p>⚠️ Make sure your notification icon is 24dp * 24dp and is pure white with transparency. Here is an example sketch file for the notification icon I design.</p><p><a href='lowes-notification-icon.sketch'>lowes-notification-icon.sketch</a></p><hr><p>For <em>small icon</em>, if you use type <em>Notification Messages</em> or <em>Notification With Data Payloads</em>, you can specify what icon to use by passing <em>icon</em> property under <em>notification</em> section. The <em>icon</em> property is a String for drawable name. The <em>icon</em> property is optional. Add following code to your <em>AndroidManifest.xml</em> to avoid icon property.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;meta-data android:name&#x3D;&quot;com.google.firebase.messaging.default_notification_icon&quot;</span><br><span class="line">android:resource&#x3D;&quot;@drawable&#x2F;ic_notification_launcher_original&quot; &#x2F;&gt;</span><br><span class="line"></span><br><span class="line">&lt;meta-data</span><br><span class="line">android:name&#x3D;&quot;com.google.firebase.messaging.default_notification_color&quot;</span><br><span class="line">android:resource&#x3D;&quot;@color&#x2F;color_accent&quot; &#x2F;&gt;</span><br></pre></td></tr></table></figure><p>(Add between application tags)</p><h2 id="Create-Notification-Manually"><a href="#Create-Notification-Manually" class="headerlink" title="Create Notification Manually"></a>Create Notification Manually</h2><p>So if you send a pure data message, the callback <em>onMessageReceived</em> will gets fired no matter what state app is in. It by default will not create any heads-up notification. Unless you implemented in that callback. Here is an example implementation.</p><p>Assume the following code locates in class <em>LowesFirebaseMessagingService : FirebaseMessagingService()</em></p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">companion</span> <span class="keyword">object</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">val</span> TAG = <span class="string">&quot;LowesFirebaseMessaging&quot;</span></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">val</span> CHANNEL_ID = <span class="string">&quot;Lowes_Notification_Channel&quot;</span></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">val</span> CHANNEL_DESCRIPTION = <span class="string">&quot;Lowes Notification&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Data Keys</span></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">val</span> NOTIFICATION_DATA_KEY_TITLE = <span class="string">&quot;title&quot;</span></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">val</span> NOTIFICATION_DATA_KEY_BODY = <span class="string">&quot;body&quot;</span></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">val</span> NOTIFICATION_DATA_KEY_DEEP_LINK = <span class="string">&quot;deep-link&quot;</span></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">val</span> NOTIFICATION_DATA_KEY_WEB_LINK = <span class="string">&quot;http-link&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onMessageReceived</span><span class="params">(p0: <span class="type">RemoteMessage</span>?)</span></span> &#123;</span><br><span class="line">    p0?.let &#123; sendNotification(it) &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">sendNotification</span><span class="params">(p0: <span class="type">RemoteMessage</span>)</span></span> &#123;</span><br><span class="line">    <span class="keyword">val</span> defaultSoundUri = RingtoneManager.getDefaultUri(RingtoneManager.TYPE_NOTIFICATION)</span><br><span class="line">    <span class="keyword">val</span> notificationManager = getSystemService(Context.NOTIFICATION_SERVICE) <span class="keyword">as</span> NotificationManager</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Since android Oreo notification channel is needed.</span></span><br><span class="line">    <span class="keyword">if</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.O) &#123;</span><br><span class="line">        <span class="keyword">val</span> channel = NotificationChannel(CHANNEL_ID,</span><br><span class="line">                CHANNEL_DESCRIPTION,</span><br><span class="line">                NotificationManager.IMPORTANCE_HIGH)</span><br><span class="line">        notificationManager.createNotificationChannel(channel)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> intent = Intent(<span class="keyword">this</span>, LaunchActivity::<span class="keyword">class</span>.java)</span><br><span class="line">    intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP)</span><br><span class="line">    intent.putExtra(NOTIFICATION_DATA_KEY_DEEP_LINK, p0.<span class="keyword">data</span>[NOTIFICATION_DATA_KEY_DEEP_LINK])</span><br><span class="line">    intent.putExtra(NOTIFICATION_DATA_KEY_WEB_LINK, p0.<span class="keyword">data</span>[NOTIFICATION_DATA_KEY_WEB_LINK])</span><br><span class="line">    <span class="keyword">val</span> pendingIntent = PendingIntent.getActivity(<span class="keyword">this</span>, <span class="number">0</span> <span class="comment">/* Request code */</span>, intent,</span><br><span class="line">            PendingIntent.FLAG_ONE_SHOT)</span><br><span class="line">    <span class="keyword">val</span> notificationBuilder = NotificationCompat.Builder(<span class="keyword">this</span>, CHANNEL_ID).run &#123;</span><br><span class="line">        setSmallIcon(R.drawable.ic_notification_small_logo)</span><br><span class="line">        setLargeIcon(BitmapFactory.decodeResource(applicationContext.resources, R.mipmap.ic_launcher))</span><br><span class="line">  priority = NotificationCompat.PRIORITY_MAX</span><br><span class="line">        setContentTitle(p0.<span class="keyword">data</span>[NOTIFICATION_DATA_KEY_TITLE])</span><br><span class="line">        setContentText(p0.<span class="keyword">data</span>[NOTIFICATION_DATA_KEY_BODY])</span><br><span class="line">        setAutoCancel(<span class="literal">true</span>)</span><br><span class="line">        setSound(defaultSoundUri)</span><br><span class="line">        setContentIntent(pendingIntent)</span><br><span class="line">    &#125;</span><br><span class="line">    notificationManager.notify(<span class="number">0</span>, notificationBuilder.build())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The intent for the <em>LaunchActivity</em> can pass in all kinds of data payloads as you need.</p><h2 id="Show-Floating-Window-Banner"><a href="#Show-Floating-Window-Banner" class="headerlink" title="Show Floating Window (Banner)"></a>Show Floating Window (Banner)</h2><p>🧪 You probably noticed, when sending a message, it creates a message in notification centre. However, there’s not notification banner showing on top.  </p><p>If you want android to show a floating window (top floating banner) when received a notification, you will need to set the priority to high/max.</p><p>Remember that you have two places to setup. One is to setup the priority attribute for <em>NotificationBuilder</em> when build the notification. The other is the notification level for notification channel. I set to <em>NotificationManager.IMPORTANCE_HIGH</em> in constructor. Notification channel only used in system after <em>Build.VERSION_CODES.O</em></p><p>⚠️ It is not recommend to use the priority contains in the <em>RemoteMessage</em>. First of all, the priority is 1 for high, 2 for normal. However, <em>IMPORTANCE_HIGH</em> is 4 and <em>PRIORITY_MAX</em> is 2. Also I don’t know why if you change the priority level for channel, you will need to reinstall the app for it to work. So I never make it work for dynamic priority.</p><p><strong>Trouble shooting:</strong><br>If you see the floating window in lower android version, but not higher android version, check if you have set priority high in notification channel. You will need to <strong>uninstall &amp; reinstall</strong> the app to take affect.</p><h2 id="Notification-Click-Events"><a href="#Notification-Click-Events" class="headerlink" title="Notification Click Events"></a>Notification Click Events</h2><p>The other important part is how to handle notification when user click on it. For different type of notification, there are different ways to do it. Let’s discuss this one by one.</p><p>For type: <strong>Notification Messages</strong>, you cannot do anything other than redirect to a specific activity.</p><p>To redirect to a specific activity, you will need to add following to the activity you want to redirect.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;activity</span><br><span class="line">    android:name&#x3D;&quot;presentation.activities.LaunchActivity&quot;</span><br><span class="line">    android:theme&#x3D;&quot;@style&#x2F;LauncherTheme&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- For push notification, launch LaunchActivity after click on the notification. --&gt;</span><br><span class="line">    &lt;intent-filter&gt;</span><br><span class="line">        &lt;action android:name&#x3D;&quot;example.notification.launch.activity&quot; &#x2F;&gt;</span><br><span class="line">        &lt;category android:name&#x3D;&quot;android.intent.category.DEFAULT&quot; &#x2F;&gt;</span><br><span class="line">    &lt;&#x2F;intent-filter&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;activity&gt;</span><br></pre></td></tr></table></figure><p>The action name <code>example.notification.launch.activity</code> in above example can be customize to any String you want and will be used in the <em>”click_action</em> property when composing the notification <em>JSON</em>. See detail in another notes related to <em>send firebase cloud messaging via HTTP.</em></p><p>If the app is in foreground, <code>onMessageReceived</code> is getting called and will handle notification manually. See detail in <em>Data Messages</em>.</p><p>For type: <strong>Notification With Data Payloads</strong>, you can redirect to any activity using the method states above, as well as passing the data payloads into the activity intent. You can get the payload data hash map by accessing <code>getIntents().getExtras()</code></p><p>For type: <strong>Data Messages</strong>, you can specify which activity to launch while creating the heads-up notification. You can also input any data payloads into the intent extras.</p><p>So in order to handle everything properly after launching the activity, you can check the intent extras and do anything depends on different intents received.</p><p>My suggestion is you can implement the deep-linking for the app and re-use the deep-linking for push notification. For example, you want a notification to go to register screen, then you can implement a deep link to go to the register screen and reuse the logic there.</p><h1 id="Custom-Notification"><a href="#Custom-Notification" class="headerlink" title="Custom Notification"></a>Custom Notification</h1><p>First only a data message accepts custom views, if you want custom layout, use a data type message.</p><p>If you don’t like the current notification style, you can also create a custom notification view. You can use <em>ImageView</em> in custom notification view so that you don’t need to show only the white/transparent icon.</p><p>Assume that you don’t like the large and small icon style for system under api-23, you want to use a square app icon instead:</p><p>From:<br><img src="Screen%20Shot%202019-06-28%20at%2010.19.01%20AM.png"><br>To:<br><img src="Screen%20Shot%202019-06-28%20at%2010.17.24%20AM.png"></p><p>You will need to first create a <em>layout.xml</em>. Here is an example for the above layout:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">RelativeLayout</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    &lt;ImageView</span><br><span class="line">        android:id=&quot;@+id/notification_icon&quot;</span><br><span class="line">        android:layout_width=&quot;40dp&quot;</span><br><span class="line">        android:layout_height=&quot;40dp&quot;</span><br><span class="line">        android:layout_alignParentStart=&quot;true&quot;</span><br><span class="line">        android:layout_centerVertical=&quot;true&quot;</span><br><span class="line">        android:layout_marginStart=&quot;11dp&quot;</span><br><span class="line">        android:layout_marginEnd=&quot;11dp&quot;</span><br><span class="line">        android:contentDescription=&quot;@string/app_notification_icon&quot;</span><br><span class="line">        android:src=&quot;@mipmap/ic_launcher&quot; /&gt;</span><br><span class="line"></span><br><span class="line">    &lt;LinearLayout</span><br><span class="line">        android:layout_width=&quot;wrap_content&quot;</span><br><span class="line">        android:layout_height=&quot;wrap_content&quot;</span><br><span class="line">        android:layout_alignParentStart=&quot;true&quot;</span><br><span class="line">        android:layout_centerVertical=&quot;true&quot;</span><br><span class="line">        android:layout_marginStart=&quot;64dp&quot;</span><br><span class="line">        android:orientation=&quot;vertical&quot;&gt;</span><br><span class="line"></span><br><span class="line">        &lt;TextView</span><br><span class="line">            android:id=&quot;@+id/notification_title&quot;</span><br><span class="line">            style=&quot;@style/TextAppearance.Compat.Notification.Title&quot;</span><br><span class="line">            android:layout_width=&quot;wrap_content&quot;</span><br><span class="line">            android:layout_height=&quot;wrap_content&quot;</span><br><span class="line">            android:layout_marginBottom=&quot;3dp&quot;</span><br><span class="line">            android:lines=&quot;1&quot; /&gt;</span><br><span class="line"></span><br><span class="line">        &lt;TextView</span><br><span class="line">            android:id=&quot;@+id/notification_body&quot;</span><br><span class="line">            style=&quot;@style/TextAppearance.Compat.Notification.Info&quot;</span><br><span class="line">            android:layout_width=&quot;wrap_content&quot;</span><br><span class="line">            android:layout_height=&quot;wrap_content&quot;</span><br><span class="line">            android:lines=&quot;1&quot; /&gt;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">RelativeLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><p>[File name: <code>view_headsup_notification_api_23.xml</code>]</p><p>Now after created the above xml, when build the notification in <em>NotificationBuilder</em>, specify the <em>setContentIntent</em> to a <em>Remote View</em>. See below code for details.</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">   <span class="keyword">val</span> notificationBuilder = NotificationCompat.Builder(<span class="keyword">this</span>, CHANNEL_ID).run &#123;</span><br><span class="line">       setDefaults(NotificationCompat.DEFAULT_ALL)</span><br><span class="line">       setSmallIcon(R.drawable.ic_notification_small_logo)</span><br><span class="line"><span class="comment">// Only show customize view for build under api-23</span></span><br><span class="line">       <span class="keyword">if</span> (Build.VERSION.SDK_INT &lt;= Build.VERSION_CODES.M) &#123;</span><br><span class="line">           <span class="keyword">val</span> remoteView = RemoteViews(packageName, <span class="keyword">if</span> (Build.VERSION.SDK_INT &gt; Build.VERSION_CODES.M) R.layout.view_headsup_notification <span class="keyword">else</span> R.layout.view_headsup_notification_api_23)</span><br><span class="line">           remoteView.setTextViewText(R.id.notification_title, p0.<span class="keyword">data</span>[NOTIFICATION_DATA_KEY_TITLE])</span><br><span class="line">           remoteView.setTextViewText(R.id.notification_body, p0.<span class="keyword">data</span>[NOTIFICATION_DATA_KEY_BODY])</span><br><span class="line">           setCustomContentView(remoteView)</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       priority = NotificationCompat.PRIORITY_MAX</span><br><span class="line">       setContentTitle(p0.<span class="keyword">data</span>[NOTIFICATION_DATA_KEY_TITLE])</span><br><span class="line">       setContentText(p0.<span class="keyword">data</span>[NOTIFICATION_DATA_KEY_BODY])</span><br><span class="line"> <span class="comment">// Setup custom view</span></span><br><span class="line">       setContentIntent(pendingIntent)</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Everything about setting up Android project with Firebase Cloud Messaging.&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
